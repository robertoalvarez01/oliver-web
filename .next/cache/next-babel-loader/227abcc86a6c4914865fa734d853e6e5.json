{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n//import {API} from '../config/index';\nimport { TRAER_PRODUCTOS, AGREGAR_PRODUCTO, ELIMINAR_PRODUCTO, LOADING, ERROR } from '../types/carritoTypes';\nexport var traerProductos = function traerProductos() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var productos, subtotal, payloadData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n\n              try {\n                productos = JSON.parse(localStorage.getItem('carrito'));\n                subtotal = 0;\n                productos.forEach(function (prd) {\n                  subtotal += parseInt(prd.precioUnidad * prd.cantidad);\n                });\n                payloadData = {\n                  productos: productos,\n                  subtotal: subtotal\n                };\n                dispatch({\n                  type: TRAER_PRODUCTOS,\n                  payload: payloadData\n                });\n              } catch (error) {\n                dispatch({\n                  type: ERROR,\n                  payload: error\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var agregarProducto = function agregarProducto(producto) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n      var productos, listProductosUpgrade, productoRepetido, restantes, prds, subtotal, payloadData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n\n              try {\n                //productos que hay en el reducer\n                productos = getState().carritoReducer.productos;\n                productoRepetido = productos.filter(function (res) {\n                  return res.idSubProducto == producto.idSubProducto;\n                });\n\n                if (productoRepetido.length > 0) {\n                  //si se intenta agregar de nuevo el mismo producto, se suma la cantidad, no todo el producto.\n                  productoRepetido[0].cantidad = productoRepetido[0].cantidad + producto.cantidad;\n                  restantes = productos.filter(function (newRes) {\n                    return newRes.idSubProducto != productoRepetido[0].idSubProducto;\n                  });\n\n                  if (restantes.length > 0) {\n                    listProductosUpgrade = [].concat(_toConsumableArray(restantes), [productoRepetido[0]]);\n                  } else {\n                    listProductosUpgrade = [productoRepetido[0]];\n                  }\n                } else {\n                  listProductosUpgrade = [].concat(_toConsumableArray(productos), [producto]);\n                } //actualizo localstorage\n\n\n                localStorage.setItem('carrito', JSON.stringify(listProductosUpgrade)); //calculo el subtotal\n\n                prds = JSON.parse(localStorage.getItem('carrito'));\n                subtotal = 0;\n                prds.forEach(function (prd) {\n                  subtotal += parseInt(prd.precioUnidad * prd.cantidad);\n                });\n                payloadData = {\n                  listProductosUpgrade: listProductosUpgrade,\n                  subtotal: subtotal\n                };\n                setTimeout(function () {\n                  dispatch({\n                    type: AGREGAR_PRODUCTO,\n                    payload: payloadData\n                  });\n                }, 1500);\n              } catch (error) {\n                dispatch({\n                  type: ERROR,\n                  payload: error\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var eliminarProducto = function eliminarProducto(idSubProducto) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n      var productos, newProductos, prds, subtotal, payloadData;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n\n              try {\n                productos = getState().carritoReducer.productos; //filtro los productos que no tengan el idProducto que se recibi√≥. entonces elimino ese producto y actualizo el reducer.\n\n                newProductos = productos.filter(function (newArray) {\n                  return newArray.idSubProducto !== idSubProducto;\n                }); //console.log(newProductos);\n\n                localStorage.setItem('carrito', JSON.stringify(newProductos)); //calculo el subtotal\n\n                prds = JSON.parse(localStorage.getItem('carrito'));\n                subtotal = 0;\n                prds.forEach(function (prd) {\n                  subtotal += parseInt(prd.precioUnidad * prd.cantidad);\n                });\n                payloadData = {\n                  newProductos: newProductos,\n                  subtotal: subtotal\n                };\n                dispatch({\n                  type: ELIMINAR_PRODUCTO,\n                  payload: payloadData\n                });\n              } catch (error) {\n                dispatch({\n                  type: ERROR,\n                  payload: error\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/franc/Documents/oliver-2/sitio-desa/store/actions/carritoActions.js"],"names":["TRAER_PRODUCTOS","AGREGAR_PRODUCTO","ELIMINAR_PRODUCTO","LOADING","ERROR","traerProductos","dispatch","type","productos","JSON","parse","localStorage","getItem","subtotal","forEach","prd","parseInt","precioUnidad","cantidad","payloadData","payload","error","agregarProducto","producto","getState","carritoReducer","productoRepetido","filter","res","idSubProducto","length","restantes","newRes","listProductosUpgrade","setItem","stringify","prds","setTimeout","eliminarProducto","newProductos","newArray"],"mappings":"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","sourcesContent":["//import {API} from '../config/index';\r\nimport {TRAER_PRODUCTOS,AGREGAR_PRODUCTO,ELIMINAR_PRODUCTO,LOADING,ERROR} from '../types/carritoTypes';\r\n\r\nexport const traerProductos = ()=>async (dispatch)=>{\r\n    dispatch({\r\n        type:LOADING\r\n    });\r\n    try {\r\n        const productos = JSON.parse(localStorage.getItem('carrito'));\r\n        let subtotal = 0;\r\n        productos.forEach(prd => {\r\n            subtotal += parseInt(prd.precioUnidad * prd.cantidad);\r\n        });\r\n        let payloadData = {\r\n            productos,\r\n            subtotal\r\n        }\r\n        dispatch({\r\n            type:TRAER_PRODUCTOS,\r\n            payload:payloadData\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        })\r\n    }\r\n}\r\n\r\nexport const agregarProducto = producto=>async (dispatch,getState)=>{\r\n    dispatch({\r\n        type:LOADING\r\n    });\r\n    try {\r\n        //productos que hay en el reducer\r\n        let {productos} = getState().carritoReducer;\r\n        let listProductosUpgrade;\r\n        let productoRepetido = productos.filter(res=>res.idSubProducto==producto.idSubProducto);\r\n        if(productoRepetido.length>0){//si se intenta agregar de nuevo el mismo producto, se suma la cantidad, no todo el producto.\r\n            productoRepetido[0].cantidad = productoRepetido[0].cantidad + producto.cantidad;\r\n            let restantes = productos.filter(newRes=>newRes.idSubProducto!=productoRepetido[0].idSubProducto);\r\n            if(restantes.length>0){\r\n                listProductosUpgrade = [\r\n                    ...restantes,\r\n                    productoRepetido[0]\r\n                ];\r\n            }else{\r\n                listProductosUpgrade = [\r\n                    productoRepetido[0]\r\n                ];\r\n            }\r\n        }else{\r\n            listProductosUpgrade = [\r\n                ...productos,\r\n                producto\r\n            ];\r\n        }\r\n        //actualizo localstorage\r\n        localStorage.setItem('carrito',JSON.stringify(listProductosUpgrade));\r\n\r\n        //calculo el subtotal\r\n        const prds = JSON.parse(localStorage.getItem('carrito'));\r\n        let subtotal = 0;\r\n        prds.forEach(prd => {\r\n            subtotal += parseInt(prd.precioUnidad * prd.cantidad);\r\n        });\r\n\r\n        let payloadData = {\r\n            listProductosUpgrade,\r\n            subtotal\r\n        }\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type:AGREGAR_PRODUCTO,\r\n                payload:payloadData\r\n            })\r\n        }, 1500);\r\n    } catch (error) {\r\n       dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        }) \r\n    }\r\n}\r\n\r\nexport const eliminarProducto = idSubProducto=>async (dispatch,getState)=>{\r\n    dispatch({\r\n        type:LOADING\r\n    });\r\n    try {\r\n        const {productos} = getState().carritoReducer;\r\n        //filtro los productos que no tengan el idProducto que se recibi√≥. entonces elimino ese producto y actualizo el reducer.\r\n        const newProductos = productos.filter(newArray=>newArray.idSubProducto !== idSubProducto);\r\n        //console.log(newProductos);\r\n        localStorage.setItem('carrito',JSON.stringify(newProductos));\r\n\r\n        //calculo el subtotal\r\n        const prds = JSON.parse(localStorage.getItem('carrito'));\r\n        let subtotal = 0;\r\n        prds.forEach(prd => {\r\n            subtotal += parseInt(prd.precioUnidad * prd.cantidad);\r\n        });\r\n        \r\n        let payloadData = {\r\n            newProductos,\r\n            subtotal\r\n        }\r\n        dispatch({\r\n            type:ELIMINAR_PRODUCTO,\r\n            payload:payloadData\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        })    \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}