{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport FiltroStyle from './Filtro.module.css';\nimport Modal from '../Modal';\nimport ModalMarca from '../ModalMarca';\nimport Router from 'next/router';\nimport { faTimes, faBroom, faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { connect } from 'react-redux';\nimport * as subproductosActions from '../../../store/actions/subproductosActions';\nimport * as marcasActions from '../../../store/actions/marcasActions';\nimport * as categoriasActions from '../../../store/actions/categoriasAction';\nimport * as subcategoriasActions from '../../../store/actions/subcategoriasAction';\nimport Loader from '../Loader';\nconst {\n  traerTodas: marcasTraerTodas\n} = marcasActions;\nconst {\n  filtrarProductos: subproductosFiltrarProductos,\n  traerTodos: subproductosTraerTodos\n} = subproductosActions;\nconst {\n  traerTodas: categoriasTraerTodas\n} = categoriasActions;\nconst {\n  traerTodas: subcategoriaTraerTodas\n} = subcategoriasActions;\n\nconst Filtro = props => {\n  //state for the filters\n  const {\n    0: estadoFiltro,\n    1: setEstadoFiltro\n  } = useState({\n    filtrando: false,\n    categoria: '',\n    subcategoria: '',\n    marca: '',\n    buscador: ''\n  }); //manejo de Modal marcas\n\n  const {\n    0: modalIsOpen,\n    1: setModalIsOpen\n  } = useState(false);\n\n  const onCloseModal = () => {\n    document.getElementsByTagName('body')[0].style.overflowY = 'scroll';\n    setModalIsOpen(false);\n  }; //loop de efecto para ejecutar solo una vez cuando el componente se monte en el caso de que se este filtrando directo desde la url\n\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = async () => {\n    try {\n      if (props.marcasReducer.marcas.length === 0) {\n        await props.marcasTraerTodas();\n      }\n\n      if (props.categoriasReducer.categorias.length === 0) {\n        await props.categoriasTraerTodas();\n      }\n\n      if (props.subcategoriaReducer.subcategorias.length === 0) {\n        await props.subcategoriaTraerTodas();\n      }\n\n      if (props.location !== '/productos') {\n        activarFiltroPorUrl();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; //loop de efecto para hacer render cada vez que se agrega o elimina un filtro\n\n\n  useEffect(() => {\n    switchItemActive();\n  }, [estadoFiltro]);\n\n  const activarFiltroPorUrl = () => {\n    return activarFiltro(props.query.type, props.query.index[1]);\n  };\n\n  const activarFiltro = (tipoFiltro, key) => {\n    switch (tipoFiltro) {\n      case 'categoria':\n        setEstadoFiltro(_objectSpread(_objectSpread({}, estadoFiltro), {}, {\n          categoria: key,\n          buscador: '',\n          filtrando: true\n        }));\n        break;\n\n      case 'subcategoria':\n        setEstadoFiltro(_objectSpread(_objectSpread({}, estadoFiltro), {}, {\n          subcategoria: key,\n          buscador: '',\n          filtrando: true\n        }));\n        break;\n\n      case 'marca':\n        setEstadoFiltro(_objectSpread(_objectSpread({}, estadoFiltro), {}, {\n          marca: key,\n          buscador: '',\n          filtrando: true\n        }));\n        break;\n\n      case 'buscador':\n        setEstadoFiltro(_objectSpread(_objectSpread({}, estadoFiltro), {}, {\n          buscador: key,\n          filtrando: true\n        }));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const switchItemActive = () => {\n    // console.log(estadoFiltro);\n    for (let index = 0; index < document.getElementsByClassName(FiltroStyle.item_filtro).length; index++) {\n      const element = document.getElementsByClassName(FiltroStyle.item_filtro)[index];\n      element.classList.remove(FiltroStyle.active);\n      document.getElementsByClassName(FiltroStyle.icon_close_filtro)[index].classList.add('d-none');\n    }\n\n    ;\n    if (!estadoFiltro.filtrando) return; //si no hay nada en buscador, puedo setear un active en algun elemento de la lista\n\n    if (estadoFiltro.buscador.trim() === '') {\n      //recorro el state para obtener las claves y agregar active el elemento correspondiente\n      for (const key in estadoFiltro) {\n        if (estadoFiltro[key] && estadoFiltro[key] !== '' && estadoFiltro[key] !== true) {\n          //console.log(estadoFiltro[key]);\n          if (document.getElementsByName(`${key}-${estadoFiltro[key]}`)[0]) {\n            //pregunto si existe el elemento con el name del filtro para agregarle el active, si no existe lo creo. (si no existe es porque viene desde modal de marcas)\n            console.log('!!!');\n            document.getElementsByName(`${key}-${estadoFiltro[key]}`)[0].classList.add(FiltroStyle.active);\n            document.getElementById(`close-${key}-${estadoFiltro[key]}`).classList.remove('d-none');\n          } else {\n            if (estadoFiltro.marca !== '') {\n              //creo los elementos del item\n              let newItemMarca = document.createElement('li');\n              let divItemMarca = document.createElement('div');\n              let spanItemMarca = document.createElement('span');\n              let iconClose = document.createElement('svg');\n              let marcaName = props.marcasReducer.marcas.filter(res => res.idMarca == estadoFiltro.marca)[0].marca; //asigno las clases, atributos y eventos necesarios.\n\n              divItemMarca.className = `${FiltroStyle.item_filtro} ${FiltroStyle.active}`;\n              divItemMarca.setAttribute('name', `marca-${estadoFiltro.marca}`);\n              divItemMarca.addEventListener('click', () => activarFiltro('marca', estadoFiltro.marca));\n              spanItemMarca.className = 'text-muted';\n              spanItemMarca.innerHTML = marcaName;\n              iconClose.innerHTML = `\n                                <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"times\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 352 512\" class=\"svg-inline--fa fa-times fa-w-11 Filtro_icon_close_filtro__1xlv5\" id=\"close-marca-${estadoFiltro.marca}\">\n                                    <path fill=\"currentColor\" d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"></path>\n                                </svg>\n                            `;\n              iconClose.addEventListener('click', () => limpiarFiltro('marca')); //voy ubicando los elementos dentro de cada padre\n\n              divItemMarca.appendChild(spanItemMarca);\n              newItemMarca.appendChild(divItemMarca);\n              newItemMarca.appendChild(iconClose); //Obtengo el primer item de la lista y lo elimino, para tener siempre la misma cantidad de marcas en la lista.\n\n              if (document.querySelector(`#listaMarca`)) {\n                let firstItemMarca = document.querySelector(`#listaMarca`).children[0];\n                let listaMarcas = document.querySelector(`#listaMarca`);\n                listaMarcas.removeChild(firstItemMarca); //ahora agrego el item creado a la lista\n\n                listaMarcas.appendChild(newItemMarca);\n              }\n\n              ;\n            }\n          }\n        }\n      }\n    } //la primera vez que se carga el componente, filtrando es false, por eso pregunto para que no se ejecuta la funcion de ir a filtrar apenas se monte el componente. Sino que se ejecute cuando de verdad se quiera filtrar.\n\n\n    if (estadoFiltro.filtrando) {\n      let urlFiltro = armarUrlFiltro(); //armo la url que mando a la api para traer los resultados de lo filtrado.\n\n      props.subproductosFiltrarProductos(urlFiltro);\n    }\n\n    ;\n  };\n\n  const limpiarFiltro = tipo => {\n    switch (tipo) {\n      case 'categoria':\n        if (estadoFiltro.subcategoria === '' && estadoFiltro.marca === '') {\n          setEstadoFiltro(_objectSpread(_objectSpread({}, estadoFiltro), {}, {\n            categoria: '',\n            filtrando: false\n          }));\n          props.subproductosTraerTodos();\n\n          if (props.location != 'productos') {\n            Router.push('/productos');\n          }\n        } else {\n          setEstadoFiltro(_objectSpread(_objectSpread({}, estadoFiltro), {}, {\n            categoria: ''\n          }));\n        }\n\n        break;\n\n      case 'subcategoria':\n        if (estadoFiltro.categoria === '' && estadoFiltro.marca === '') {\n          setEstadoFiltro(_objectSpread(_objectSpread({}, estadoFiltro), {}, {\n            subcategoria: '',\n            filtrando: false\n          }));\n          props.subproductosTraerTodos();\n\n          if (props.location != 'productos') {\n            Router.push('/productos');\n          }\n        } else {\n          setEstadoFiltro(_objectSpread(_objectSpread({}, estadoFiltro), {}, {\n            subcategoria: ''\n          }));\n        }\n\n        break;\n\n      case 'marca':\n        if (estadoFiltro.categoria === '' && estadoFiltro.subcategoria == '') {\n          setEstadoFiltro(_objectSpread(_objectSpread({}, estadoFiltro), {}, {\n            marca: '',\n            filtrando: false\n          }));\n        } else {\n          setEstadoFiltro(_objectSpread(_objectSpread({}, estadoFiltro), {}, {\n            marca: ''\n          }));\n        }\n\n        break;\n\n      default:\n        setEstadoFiltro({\n          filtrando: false,\n          categoria: '',\n          subcategoria: '',\n          marca: '',\n          buscador: ''\n        });\n        props.subproductosTraerTodos();\n\n        if (props.location != 'productos') {\n          Router.push('/productos');\n        }\n\n        break;\n    }\n  };\n\n  const closeFiltrosMobile = () => {\n    document.getElementsByClassName(FiltroStyle.filtros__contanier)[0].classList.remove(FiltroStyle.show_filtros);\n  };\n\n  const armarUrlFiltro = () => {\n    let url = 'filtrar'; //si buscador viene true, es porque viene desde el buscador del menu o modal de buscador(mobile).\n\n    if (estadoFiltro.buscador !== '') return url += `?buscar=${estadoFiltro.buscador}`;\n    let categoria = estadoFiltro.categoria,\n        subcategoria = estadoFiltro.subcategoria,\n        marca = estadoFiltro.marca;\n\n    if (categoria && categoria !== '') {\n      url += `?categoria=${estadoFiltro.categoria}`;\n    }\n\n    if (estadoFiltro.subcategoria && estadoFiltro.subcategoria !== '') {\n      if (categoria !== '') {\n        url += `&subcategoria=${estadoFiltro.subcategoria}`;\n      } else {\n        url += `?subcategoria=${estadoFiltro.subcategoria}`;\n      }\n    }\n\n    if (marca && marca !== '') {\n      if (categoria !== '' && subcategoria !== '') {\n        url += `?marca=${estadoFiltro.marca}`;\n      } else {\n        url += `&marca=${estadoFiltro.marca}`;\n      }\n    }\n\n    return url;\n  };\n\n  const showFiltros = () => {\n    let element = document.getElementsByClassName(FiltroStyle.filtros__contanier)[0];\n    element.classList.toggle(FiltroStyle.show);\n    document.getElementById('iconFiltroContainer').classList.toggle(FiltroStyle.rotar);\n  };\n\n  return __jsx(\"div\", {\n    className: FiltroStyle.filtros__contanier\n  }, __jsx(\"button\", {\n    className: FiltroStyle.btn_close_filtro,\n    onClick: showFiltros\n  }, __jsx(FontAwesomeIcon, {\n    id: \"iconFiltroContainer\",\n    icon: faChevronRight\n  })), __jsx(\"div\", null, props.categoriasReducer.categorias.length == 0 || props.subcategoriaReducer.subcategorias.length == 0 || props.marcasReducer.marcas.length == 0 ? __jsx(Loader, null) : __jsx(React.Fragment, null, estadoFiltro.filtrando ? __jsx(\"button\", {\n    className: \"boton bg-yellow mb-3\",\n    onClick: limpiarFiltro\n  }, __jsx(FontAwesomeIcon, {\n    icon: faBroom\n  }), \" Limpiar Filtros\") : null, __jsx(FontAwesomeIcon, {\n    icon: faTimes,\n    className: FiltroStyle.cerrar_filtro_mobile,\n    onClick: closeFiltrosMobile\n  }), __jsx(\"h4\", {\n    className: FiltroStyle.titulo_filtros\n  }, \"Mascota\"), __jsx(\"ul\", {\n    className: FiltroStyle.lista\n  }, props.categoriasReducer.categorias.map(cat => __jsx(\"li\", {\n    key: cat.idCategoria\n  }, __jsx(\"div\", {\n    className: FiltroStyle.item_filtro,\n    name: `categoria-${cat.idCategoria}`,\n    onClick: () => activarFiltro('categoria', `${cat.idCategoria}`)\n  }, __jsx(\"span\", {\n    className: \"text-muted\"\n  }, cat.categoria)), __jsx(FontAwesomeIcon, {\n    icon: faTimes,\n    className: FiltroStyle.icon_close_filtro + ' ' + `d-none`,\n    onClick: () => limpiarFiltro('categoria'),\n    id: `close-categoria-${cat.idCategoria}`\n  })))), __jsx(\"h4\", {\n    className: FiltroStyle.titulo_filtros\n  }, \"Alimentos\"), __jsx(\"ul\", {\n    className: FiltroStyle.lista\n  }, props.subcategoriaReducer.subcategorias.map(sc => __jsx(\"li\", {\n    key: sc.idSubCategoria\n  }, __jsx(\"div\", {\n    className: FiltroStyle.item_filtro,\n    name: `subcategoria-${sc.idSubCategoria}`,\n    onClick: () => activarFiltro('subcategoria', `${sc.idSubCategoria}`)\n  }, __jsx(\"span\", {\n    className: \"text-muted\"\n  }, sc.subcategoria)), __jsx(FontAwesomeIcon, {\n    icon: faTimes,\n    className: FiltroStyle.icon_close_filtro + ' ' + `d-none`,\n    onClick: () => limpiarFiltro('subcategoria'),\n    id: `close-${`subcategoria-${sc.idSubCategoria}`}`\n  })))), __jsx(\"h4\", {\n    className: FiltroStyle.titulo_filtros\n  }, \"Marca\"), __jsx(\"ul\", {\n    id: \"listaMarca\",\n    className: FiltroStyle.sinBorderBottom + ' ' + FiltroStyle.lista\n  }, props.marcasReducer.marcas.map((marca, key) => key > 3 ? false : __jsx(\"li\", {\n    key: marca.idMarca\n  }, __jsx(\"div\", {\n    className: FiltroStyle.item_filtro,\n    name: `marca-${marca.idMarca}`,\n    onClick: () => activarFiltro('marca', `${marca.idMarca}`)\n  }, __jsx(\"span\", {\n    className: \"text-muted\"\n  }, marca.marca)), __jsx(FontAwesomeIcon, {\n    icon: faTimes,\n    className: FiltroStyle.icon_close_filtro + ' ' + `d-none`,\n    onClick: () => limpiarFiltro('marca'),\n    id: `close-marca-${marca.idMarca}`\n  })))), __jsx(\"button\", {\n    onClick: () => setModalIsOpen(true),\n    className: \"boton bg-gris\"\n  }, \"Ver todas\"))), !modalIsOpen ? null : __jsx(Modal, {\n    closeModal: onCloseModal\n  }, __jsx(ModalMarca, {\n    closeModal: onCloseModal,\n    activarFiltro: activarFiltro\n  })));\n};\n\nconst mapStateToProps = ({\n  marcasReducer,\n  subproductosReducer,\n  categoriasReducer,\n  subcategoriaReducer\n}) => {\n  return {\n    marcasReducer,\n    subproductosReducer,\n    categoriasReducer,\n    subcategoriaReducer\n  };\n};\n\nconst mapDispatchToProps = {\n  marcasTraerTodas,\n  subproductosFiltrarProductos,\n  subproductosTraerTodos,\n  categoriasTraerTodas,\n  subcategoriaTraerTodas\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Filtro);","map":null,"metadata":{},"sourceType":"module"}