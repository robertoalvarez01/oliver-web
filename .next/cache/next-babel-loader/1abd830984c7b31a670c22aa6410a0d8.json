{"ast":null,"code":"//import {API} from '../config/index';\nimport { TRAER_PRODUCTOS, AGREGAR_PRODUCTO, ELIMINAR_PRODUCTO, LOADING, ERROR, CAMBIAR_MEDIO_DE_PAGO, CAMBIAR_COSTO_ENVIO } from '../types/carritoTypes';\nexport const traerProductos = () => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    const productos = await JSON.parse(localStorage.getItem('carrito'));\n    let subtotal = 0;\n    productos.forEach(prd => {\n      subtotal += parseInt(prd.precioUnidad * prd.cantidad);\n    });\n    let payloadData = {\n      productos,\n      subtotal\n    };\n    return dispatch({\n      type: TRAER_PRODUCTOS,\n      payload: payloadData\n    });\n  } catch (error) {\n    return dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const agregarProducto = producto => async (dispatch, getState) => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    //productos que hay en el reducer\n    let {\n      productos\n    } = getState().carritoReducer;\n    let listProductosUpgrade;\n    let productoRepetido = productos.filter(res => res.idSubProducto == producto.idSubProducto);\n\n    if (productoRepetido.length > 0) {\n      //si se intenta agregar de nuevo el mismo producto, se suma la cantidad, no todo el producto.\n      productoRepetido[0].cantidad = productoRepetido[0].cantidad + producto.cantidad;\n      let restantes = productos.filter(newRes => newRes.idSubProducto != productoRepetido[0].idSubProducto);\n\n      if (restantes.length > 0) {\n        listProductosUpgrade = [...restantes, productoRepetido[0]];\n      } else {\n        listProductosUpgrade = [productoRepetido[0]];\n      }\n    } else {\n      listProductosUpgrade = [...productos, producto];\n    } //actualizo localstorage\n\n\n    localStorage.setItem('carrito', JSON.stringify(listProductosUpgrade)); //calculo el subtotal\n\n    const prds = JSON.parse(localStorage.getItem('carrito'));\n    let subtotal = 0;\n    prds.forEach(prd => {\n      subtotal += parseInt(prd.precioUnidad * prd.cantidad);\n    });\n    let payloadData = {\n      listProductosUpgrade,\n      subtotal\n    };\n    setTimeout(() => {\n      dispatch({\n        type: AGREGAR_PRODUCTO,\n        payload: payloadData\n      });\n    }, 1500);\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const eliminarProducto = idSubProducto => async (dispatch, getState) => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    const {\n      productos\n    } = getState().carritoReducer; //filtro los productos que no tengan el idProducto que se recibiÃ³. entonces elimino ese producto y actualizo el reducer.\n\n    const newProductos = productos.filter(newArray => newArray.idSubProducto !== idSubProducto); //console.log(newProductos);\n\n    localStorage.setItem('carrito', JSON.stringify(newProductos)); //calculo el subtotal\n\n    const prds = JSON.parse(localStorage.getItem('carrito'));\n    let subtotal = 0;\n    prds.forEach(prd => {\n      subtotal += parseInt(prd.precioUnidad * prd.cantidad);\n    });\n    let payloadData = {\n      newProductos,\n      subtotal\n    };\n    dispatch({\n      type: ELIMINAR_PRODUCTO,\n      payload: payloadData\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const cambiarMedioDePago = idMedioDePago => dispatch => {\n  return dispatch({\n    type: CAMBIAR_MEDIO_DE_PAGO,\n    payload: idMedioDePago\n  });\n};\nexport const setCostoEnvio = costo => dispatch => {\n  return dispatch({\n    type: CAMBIAR_COSTO_ENVIO,\n    payload: costo\n  });\n};","map":{"version":3,"sources":["/home/franco/desarrollo/proyecto_oliver/oliver-web-next/store/actions/carritoActions.js"],"names":["TRAER_PRODUCTOS","AGREGAR_PRODUCTO","ELIMINAR_PRODUCTO","LOADING","ERROR","CAMBIAR_MEDIO_DE_PAGO","CAMBIAR_COSTO_ENVIO","traerProductos","dispatch","type","productos","JSON","parse","localStorage","getItem","subtotal","forEach","prd","parseInt","precioUnidad","cantidad","payloadData","payload","error","agregarProducto","producto","getState","carritoReducer","listProductosUpgrade","productoRepetido","filter","res","idSubProducto","length","restantes","newRes","setItem","stringify","prds","setTimeout","eliminarProducto","newProductos","newArray","cambiarMedioDePago","idMedioDePago","setCostoEnvio","costo"],"mappings":"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","sourcesContent":["//import {API} from '../config/index';\nimport {TRAER_PRODUCTOS,AGREGAR_PRODUCTO,ELIMINAR_PRODUCTO,LOADING,ERROR, CAMBIAR_MEDIO_DE_PAGO, CAMBIAR_COSTO_ENVIO} from '../types/carritoTypes';\n\nexport const traerProductos = ()=>async (dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        const productos = await JSON.parse(localStorage.getItem('carrito'));\n        let subtotal = 0;\n        productos.forEach(prd => {\n            subtotal += parseInt(prd.precioUnidad * prd.cantidad);\n        });\n        let payloadData = {\n            productos,\n            subtotal\n        }\n        return dispatch({\n            type:TRAER_PRODUCTOS,\n            payload:payloadData\n        });\n    } catch (error) {\n        return dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const agregarProducto = producto=>async (dispatch,getState)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        //productos que hay en el reducer\n        let {productos} = getState().carritoReducer;\n        let listProductosUpgrade;\n        let productoRepetido = productos.filter(res=>res.idSubProducto==producto.idSubProducto);\n        if(productoRepetido.length>0){//si se intenta agregar de nuevo el mismo producto, se suma la cantidad, no todo el producto.\n            productoRepetido[0].cantidad = productoRepetido[0].cantidad + producto.cantidad;\n            let restantes = productos.filter(newRes=>newRes.idSubProducto!=productoRepetido[0].idSubProducto);\n            if(restantes.length>0){\n                listProductosUpgrade = [\n                    ...restantes,\n                    productoRepetido[0]\n                ];\n            }else{\n                listProductosUpgrade = [\n                    productoRepetido[0]\n                ];\n            }\n        }else{\n            listProductosUpgrade = [\n                ...productos,\n                producto\n            ];\n        }\n        //actualizo localstorage\n        localStorage.setItem('carrito',JSON.stringify(listProductosUpgrade));\n\n        //calculo el subtotal\n        const prds = JSON.parse(localStorage.getItem('carrito'));\n        let subtotal = 0;\n        prds.forEach(prd => {\n            subtotal += parseInt(prd.precioUnidad * prd.cantidad);\n        });\n\n        let payloadData = {\n            listProductosUpgrade,\n            subtotal\n        }\n        setTimeout(() => {\n            dispatch({\n                type:AGREGAR_PRODUCTO,\n                payload:payloadData\n            })\n        }, 1500);\n    } catch (error) {\n       dispatch({\n            type:ERROR,\n            payload:error\n        }) \n    }\n}\n\nexport const eliminarProducto = idSubProducto=>async (dispatch,getState)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        const {productos} = getState().carritoReducer;\n        //filtro los productos que no tengan el idProducto que se recibiÃ³. entonces elimino ese producto y actualizo el reducer.\n        const newProductos = productos.filter(newArray=>newArray.idSubProducto !== idSubProducto);\n        //console.log(newProductos);\n        localStorage.setItem('carrito',JSON.stringify(newProductos));\n\n        //calculo el subtotal\n        const prds = JSON.parse(localStorage.getItem('carrito'));\n        let subtotal = 0;\n        prds.forEach(prd => {\n            subtotal += parseInt(prd.precioUnidad * prd.cantidad);\n        });\n        \n        let payloadData = {\n            newProductos,\n            subtotal\n        }\n        dispatch({\n            type:ELIMINAR_PRODUCTO,\n            payload:payloadData\n        });\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })    \n    }\n}\n\nexport const cambiarMedioDePago = idMedioDePago =>dispatch=>{\n    return dispatch({\n        type:CAMBIAR_MEDIO_DE_PAGO,\n        payload:idMedioDePago\n    })\n}\n\nexport const setCostoEnvio = costo=>dispatch=>{\n    return dispatch({\n        type:CAMBIAR_COSTO_ENVIO,\n        payload:costo\n    })\n}"]},"metadata":{},"sourceType":"module"}