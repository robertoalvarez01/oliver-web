{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport CardUbicacion from '../../src/components/CardUbicacion/index';\nimport OpcionesEnvio from '../../src/components/OpcionesEnvio';\nimport ZonaEnvio from '../../src/components/ZonaEnvio';\nimport Head from '../../src/components/Head';\nimport DetalleProductos from '../../src/components/DetalleProductos';\nimport Error from '../../src/components/Error';\nimport { connect } from 'react-redux';\nimport * as carritoActions from '../../store/actions/carritoActions';\nimport * as usuarioActions from '../../store/actions/usuarioActions';\nimport { API } from '../../config/index';\nimport Loader from '../../src/components/Loader/index';\nimport MediosDePago from '../../src/components/MediosDePago';\n\nconst Swal = require('sweetalert2');\n\nconst {\n  traerProductos: carritoTraerProductos,\n  cambiarMedioDePago,\n  setCostoEnvio\n} = carritoActions;\nconst {\n  verificarSesion\n} = usuarioActions;\n\nconst Checkout = props => {\n  const {\n    0: tipoEnvio,\n    1: setTipoEnvio\n  } = useState({\n    normal: true,\n    express: false,\n    local: false\n  });\n  const {\n    0: zonaEnvio,\n    1: setZonaEnvio\n  } = useState('');\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    document.getElementsByTagName('body')[0].style.overflowY = 'scroll';\n    props.carritoTraerProductos();\n  }, []);\n\n  const cambiarTipoDeEnvio = tipoDeEnvio => {\n    if (tipoDeEnvio === 'normal') {\n      document.getElementById('form-zona-envio').removeAttribute('disabled');\n      document.getElementById('form-medios-pago').setAttribute('disabled', 'true');\n      props.cambiarMedioDePago('1');\n      return setTipoEnvio({\n        normal: true,\n        express: false,\n        local: false\n      });\n    }\n\n    if (tipoDeEnvio === 'express') {\n      document.getElementById('form-zona-envio').removeAttribute('disabled');\n      document.getElementById('form-medios-pago').setAttribute('disabled', 'true');\n      props.cambiarMedioDePago('1');\n      return setTipoEnvio({\n        normal: false,\n        express: true,\n        local: false\n      });\n    }\n\n    setZonaEnvio('');\n    document.getElementById('form-zona-envio').setAttribute('disabled', 'true');\n    document.getElementById('form-zona-envio').value = \"\";\n    document.getElementById('form-medios-pago').removeAttribute('disabled'); //seteo el costo del envio porque es retiro en el local\n\n    props.setCostoEnvio(0);\n    return setTipoEnvio({\n      normal: false,\n      express: false,\n      local: true\n    });\n  };\n\n  const insertarZonaDeEnvio = zona => {\n    setZonaEnvio(zona);\n  };\n\n  const handleClick = () => {\n    if (!tipoEnvio.local) {\n      if (!props.usuarioReducer.usuario.address || props.usuarioReducer.usuario.address === '') return setError('Es obligatorio completar tu ubicación.');\n      if (zonaEnvio === '') return setError('En caso de no retirarlo por nuestro local, es obligatorio completar la zona de envío.');\n    }\n\n    setLoading(true);\n    setError(false);\n    let tipoDeEnvioActivo;\n\n    if (tipoEnvio.local) {\n      tipoDeEnvioActivo = 'Local';\n    }\n\n    ;\n\n    if (tipoEnvio.normal) {\n      tipoDeEnvioActivo = 'Domicilio';\n    }\n\n    if (tipoEnvio.express) {\n      tipoDeEnvioActivo = 'Express';\n    }\n\n    let dataEnvio = {\n      tipo: tipoDeEnvioActivo,\n      zona: zonaEnvio\n    };\n\n    if (props.carritoReducer.idMedioPago == '1') {\n      //guardo data de envio para luego de hacer el checkout de mercado pago, envio los datos al servidor para registrar la venta con el envio correspondiente.\n      localStorage.setItem('dataEnvio', JSON.stringify(dataEnvio));\n      const {\n        token\n      } = props.usuarioReducer.usuario;\n      const {\n        productos: productosCarrito\n      } = props.carritoReducer; //SOLUCION TEMPORAL PARA QUE SE SUME AL PAGO LO DEL ENVIO\n\n      let productos = [{\n        title: 'Nueva compra en Oliver PetShop',\n        description: 'Compra de uno o mas productos',\n        quantity: 1,\n        unit_price: props.carritoReducer.total\n      }]; // TODO: VER LA FORMA DE MANDAR LOS PRODUCTOS JUNTO CON EL MONTO DEL ENVIO\n      // productosCarrito.forEach(prd => {\n      //     productos.push({\n      //         title:prd.subProducto,\n      //         description:prd.tamaño,\n      //         quantity:prd.cantidad,\n      //         unit_price:prd.precioUnidad\n      //     })\n      // });\n\n      let headers = new Headers();\n      headers.append('token', token);\n      headers.append(\"Content-Type\", \"application/json\");\n      fetch(`${API}/mercadopago`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(productos)\n      }).then(res => res.json()).then(datamp => {\n        // console.log(datamp);\n        const {\n          response\n        } = datamp.info;\n        setLoading(false);\n        window.location.assign(response.init_point);\n      }).catch(err => {\n        console.log(err);\n        setLoading(false);\n        setError(err.message);\n      });\n    } else {\n      const {\n        idUsuario\n      } = props.usuarioReducer.usuario;\n      const {\n        subtotal,\n        porcentaje_descuento,\n        descuento,\n        total,\n        productos,\n        idMedioPago\n      } = props.carritoReducer;\n      const {\n        zona,\n        tipo\n      } = dataEnvio;\n      let f = new Date();\n      let mes = f.getMonth() < 10 ? `0${f.getMonth() + 1}` : `${f.getMonth()}`;\n      let dia = f.getDate() < 10 ? `0${f.getDate()}` : `${f.getDate()}`;\n      let fecha = `${f.getFullYear()}-${mes}-${dia}`;\n      let dataToRequest = {\n        envio: {\n          idZona: zona,\n          tipo: tipo\n        },\n        venta: {\n          subtotal,\n          porcentaje_descuento,\n          descuento,\n          total,\n          idUsuario,\n          productos,\n          fecha,\n          operacion_id: null,\n          idMedioPago\n        }\n      };\n      return registrarVenta(dataToRequest);\n    }\n\n    ;\n  };\n\n  const registrarVenta = async data => {\n    try {\n      const headers = new Headers();\n      headers.append('token', props.usuarioReducer.usuario.token);\n      headers.append(\"Content-Type\", \"application/json\");\n      let url = !data.venta.operacion_id ? `${API}/registrarVenta?mercadoPago=false` : `${API}/registrarVenta?mercadoPago=true`;\n      const reqVenta = await fetch(url, {\n        headers,\n        method: 'POST',\n        body: JSON.stringify(data)\n      });\n\n      if (reqVenta.status == 200) {\n        localStorage.removeItem('dataEnvio');\n        localStorage.removeItem('carrito');\n        Swal.fire('Listo', 'Su compra se ha registrado con éxito, solo resta que se dirija a nuestro local para hacerse con su producto.', 'success').then(() => window.location.assign('/'));\n      } else {\n        setLoading(false);\n        Swal.fire('Error', 'Ha ocurrido un error al momento de registrar la venta, intentalo más tarde', 'error');\n      }\n    } catch (error) {\n      setLoading(false);\n      Swal.fire('Error', 'Ha ocurrido un error al momento de registrar la venta, intentalo más tarde', 'error');\n      console.log(error.message);\n    }\n  };\n\n  return !props.usuarioReducer.logueado ? __jsx(\"div\", {\n    className: \"mt-3\"\n  }, __jsx(Error, {\n    message: \"No puedes realizar una compra sin tener una sesi\\xF3n activa.\"\n  })) : __jsx(React.Fragment, null, props.carritoReducer.productos.length === 0 ? __jsx(\"div\", {\n    className: \"mt-3\"\n  }, __jsx(Error, {\n    message: \"No hay productos para finalizar la compra.\"\n  })) : __jsx(React.Fragment, null, loading ? __jsx(\"div\", {\n    className: \"container-loader\"\n  }, __jsx(Loader, null)) : null, __jsx(Head, {\n    title: \"Oliver Pet Shop\"\n  }), __jsx(\"div\", {\n    className: \"jsx-1473839781\" + \" \" + \"container mb-4\"\n  }, __jsx(\"div\", {\n    className: \"jsx-1473839781\" + \" \" + \"row\"\n  }, __jsx(\"div\", {\n    className: \"jsx-1473839781\" + \" \" + \"col-12 col-md-8 pt-4\"\n  }, __jsx(\"h2\", {\n    className: \"jsx-1473839781\"\n  }, \"\\xDAltimos pasos para terminar tu compra\"), error ? __jsx(Error, {\n    message: error\n  }) : null, __jsx(CardUbicacion, {\n    dataUser: props.usuarioReducer.usuario\n  }), __jsx(ZonaEnvio, {\n    setZonaEnvio: insertarZonaDeEnvio\n  }), __jsx(\"div\", {\n    className: \"jsx-1473839781\" + \" \" + \"alert alert-warning\"\n  }, __jsx(\"b\", {\n    className: \"jsx-1473839781\"\n  }, \"Atenci\\xF3n:\"), \" S\\xED desea retirar su compra en nuestro local, no es necesario que seleccione una zona de env\\xEDo\"), __jsx(\"h2\", {\n    className: \"jsx-1473839781\" + \" \" + \"mt-5\"\n  }, \"Opciones de env\\xEDo\"), __jsx(OpcionesEnvio, {\n    tipoEnvio: tipoEnvio,\n    cambiarTipoDeEnvio: cambiarTipoDeEnvio\n  }), __jsx(\"h2\", {\n    className: \"jsx-1473839781\" + \" \" + \"mt-5\"\n  }, \"Selecciona un medio de pago\"), __jsx(MediosDePago, null), __jsx(\"button\", {\n    type: \"button\",\n    onClick: handleClick,\n    id: \"btn-continuar\",\n    className: \"jsx-1473839781\" + \" \" + \"btn btn-primary\"\n  }, \"Continuar\"), __jsx(\"div\", {\n    className: \"jsx-1473839781\" + \" \" + \"divTotalMobile\"\n  }, __jsx(\"span\", {\n    id: \"total\",\n    className: \"jsx-1473839781\"\n  }, \"$\", props.carritoReducer.subtotal), __jsx(\"button\", {\n    type: \"button\",\n    onClick: handleClick,\n    className: \"jsx-1473839781\" + \" \" + \"btn btn-primary\"\n  }, \"Continuar\"))), __jsx(\"div\", {\n    className: \"jsx-1473839781\" + \" \" + \"col-12 col-md-4 detalleProductos\"\n  }, __jsx(DetalleProductos, {\n    data: props.carritoReducer\n  }))), __jsx(_JSXStyle, {\n    id: \"1473839781\"\n  }, [\"h2.jsx-1473839781{font-size:25px;}\", \"button#btn-continuar.jsx-1473839781{float:right;margin-top:20px;}\", \".divTotalMobile.jsx-1473839781{display:none;}\", \"@media(max-width:768px){#btn-continuar.jsx-1473839781{display:none;}.divTotalMobile.jsx-1473839781{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;position:fixed;left:0;right:0px;bottom:0px;background-color:#f7f7f7;padding:16px;box-shadow:0 -2px 8px 2px rgba(0,0,0,.15);border-width:0 1px 1px;font-family:'Quicksand',sans-serif;}.detalleProductos.jsx-1473839781{display:none;}}\"]))));\n};\n\nconst mapStateToProps = ({\n  carritoReducer,\n  usuarioReducer,\n  enviosReducer\n}) => {\n  return {\n    carritoReducer,\n    usuarioReducer,\n    enviosReducer\n  };\n};\n\nconst mapDispatchToProps = {\n  carritoTraerProductos,\n  verificarSesion,\n  cambiarMedioDePago,\n  setCostoEnvio\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Checkout);","map":null,"metadata":{},"sourceType":"module"}