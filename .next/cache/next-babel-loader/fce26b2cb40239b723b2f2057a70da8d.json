{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';\nimport { connect } from 'react-redux';\nimport * as usuarioActions from '../../../store/actions/usuarioActions';\nimport Loader from '../Loader/index';\n\nconst FormEditUbicacion = props => {\n  const {\n    0: formValues,\n    1: setFormValues\n  } = useState({\n    address: '',\n    lat: '',\n    lon: ''\n  });\n\n  const handleChange = address => setFormValues(_objectSpread(_objectSpread({}, formValues), {}, {\n    address\n  }));\n\n  const handleSelect = address => {\n    geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => {\n      setFormValues(_objectSpread(_objectSpread({}, formValues), {}, {\n        address,\n        lat: latLng.lat,\n        lon: latLng.lng\n      }));\n    }).catch(error => console.error('Error', error));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    props.actualizarAddress(formValues, props.usuarioReducer.usuario.idUsuario);\n  };\n\n  const {\n    loading,\n    error,\n    actionSuccess\n  } = props.usuarioReducer;\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"jsx-1878323362\" + \" \" + \"form-group\"\n  }, __jsx(\"h4\", {\n    className: \"jsx-1878323362\" + \" \" + \"my-3\"\n  }, props.update ? 'Cambiar ubicación' : 'Agregar Ubicación'), props.update ? __jsx(\"span\", {\n    className: \"jsx-1878323362\" + \" \" + \"text-muted\"\n  }, \"Ubicaci\\xF3n registrada: \", __jsx(\"b\", {\n    className: \"jsx-1878323362\"\n  }, props.usuarioReducer.usuario.address)) : null, __jsx(\"hr\", {\n    className: \"jsx-1878323362\"\n  }), __jsx(PlacesAutocomplete, {\n    value: formValues.address,\n    onChange: handleChange,\n    onSelect: handleSelect\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => __jsx(\"div\", {\n    className: \"jsx-1878323362\"\n  }, __jsx(\"input\", _extends({\n    id: \"ubicacion\"\n  }, getInputProps({\n    placeholder: 'Ingresa la nueva dirección...'\n  }), {\n    className: \"jsx-1878323362\" + \" \" + \"form-control\"\n  })), __jsx(\"div\", {\n    className: \"jsx-1878323362\" + \" \" + \"autocomplete-dropdown-container\"\n  }, loading && __jsx(\"div\", {\n    className: \"jsx-1878323362\"\n  }, \"Cargando ubicaciones...\"), suggestions.map((suggestion, key) => {\n    const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n    const style = suggestion.active ? {\n      backgroundColor: '#fafafa',\n      cursor: 'pointer',\n      margin: '10px',\n      padding: '5px'\n    } : {\n      backgroundColor: '#ffffff',\n      cursor: 'pointer',\n      margin: '10px',\n      padding: '5px'\n    };\n    return __jsx(\"div\", _extends({}, getSuggestionItemProps(suggestion, {\n      className,\n      style,\n      key\n    }), {\n      className: \"jsx-1878323362\"\n    }), __jsx(\"span\", {\n      className: \"jsx-1878323362\"\n    }, suggestion.description));\n  })))), loading ? __jsx(\"div\", {\n    className: \"jsx-1878323362\" + \" \" + \"text-center\"\n  }, __jsx(Loader, null)) : __jsx(\"input\", {\n    type: \"submit\",\n    value: \"Guardar direcci\\xF3n\",\n    className: \"jsx-1878323362\" + \" \" + \"boton bg-yellow mt-3\"\n  }), __jsx(_JSXStyle, {\n    id: \"1878323362\"\n  }, [\"input.jsx-1878323362,span.jsx-1878323362{font-family:'Quicksand',sans-serif;}\"]));\n};\n\nconst mapStateToProps = ({\n  usuarioReducer\n}) => {\n  return {\n    usuarioReducer\n  };\n};\n\nexport default connect(mapStateToProps, usuarioActions)(FormEditUbicacion);","map":null,"metadata":{},"sourceType":"module"}