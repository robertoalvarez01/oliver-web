{"ast":null,"code":"import { API, PUBLIC_URL } from '../../config/index';\nimport { VERIFICAR_SESION, LOGIN, LOGOUT, LOADING, ERROR, UPDATE_USER, UPDATE_PASSWORD } from '../types/usuarioTypes';\nexport const login = data => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    if (data.email.trim() === '' || data.password.trim() === '') {\n      return dispatch({\n        type: ERROR,\n        payload: 'Es necesario completar todos los campos'\n      });\n    }\n\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    return fetch(`${API}/login`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers\n    }).then(res => res.json()).then(response => {\n      if (response.ok) {\n        let objUsuario = {\n          nombre: response.usuario.nombre,\n          email: response.usuario.email,\n          foto: response.usuario.foto,\n          token: response.token,\n          address: response.usuario.ubicacion,\n          idUsuario: response.usuario.idUsuario,\n          lat: response.usuario.lat,\n          lon: response.usuario.lon,\n          telefono: response.usuario.telefono\n        };\n        localStorage.setItem('oliverpetshop_usuario', JSON.stringify(objUsuario));\n        dispatch({\n          type: LOGIN,\n          payload: localStorage.getItem('oliverpetshop_usuario')\n        });\n      } else {\n        return dispatch({\n          type: ERROR,\n          payload: response.info\n        });\n      }\n    });\n  } catch (error) {\n    console.log(error);\n    return dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    localStorage.removeItem('oliverpetshop_usuario');\n    return dispatch({\n      type: LOGOUT\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const verificarSesion = (token = null) => async dispatch => {\n  try {\n    let dataUsuario = JSON.parse(localStorage.getItem('oliverpetshop_usuario'));\n\n    if (dataUsuario || token) {\n      // request para verificar que el token corresponda a una sesion activa\n      let headers = new Headers();\n      let tokenSend = token ? token : dataUsuario.token;\n      headers.append('token', tokenSend);\n      const request = await fetch(`${API}/verify-sesion`, {\n        method: 'GET',\n        headers\n      });\n\n      if (request.status != 200) {\n        return dispatch({\n          type: VERIFICAR_SESION,\n          payload: {\n            data: null,\n            logueado: false\n          }\n        });\n      }\n\n      return dispatch({\n        type: VERIFICAR_SESION,\n        payload: {\n          data: dataUsuario,\n          logueado: true\n        }\n      });\n    }\n\n    return dispatch({\n      type: VERIFICAR_SESION,\n      payload: {\n        data: null,\n        logueado: false\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const register = data => dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    return fetch(`${API}/register`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers\n    }).then(res => res.json()).then(response => {\n      if (response.ok) {\n        let objUsuario = {\n          nombre: response.usuario.nombre,\n          email: response.usuario.email,\n          foto: response.usuario.foto,\n          token: response.token,\n          address: response.usuario.address,\n          idUsuario: response.usuario.idUsuario\n        };\n        localStorage.setItem('oliverpetshop_usuario', JSON.stringify(objUsuario));\n        dispatch({\n          type: LOGIN,\n          payload: localStorage.getItem('oliverpetshop_usuario')\n        });\n      } else {\n        dispatch({\n          type: ERROR,\n          payload: response.info\n        });\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const singInWithGoogle = (tokenId, googleId) => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    return fetch(`${API}/google/tokensignin`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify({\n        token: tokenId\n      })\n    }).then(res => res.json()).then(response => {\n      if (!response.ok) {\n        return dispatch({\n          type: ERROR,\n          payload: response.info\n        });\n      }\n\n      ;\n      let objUsuario = {\n        nombre: response.usuario.nombre,\n        email: response.usuario.email,\n        foto: response.usuario.foto,\n        token: response.token,\n        address: response.usuario.address,\n        idUsuario: response.usuario.idUsuario,\n        lat: response.usuario.lat,\n        lon: response.usuario.lon,\n        telefono: response.usuario.telefono\n      };\n      localStorage.setItem('oliverpetshop_usuario', JSON.stringify(objUsuario));\n      dispatch({\n        type: LOGIN,\n        payload: localStorage.getItem('oliverpetshop_usuario')\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const actualizarFoto = (data, id) => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    let token = JSON.parse(localStorage.getItem('oliverpetshop_usuario')).token;\n    headers.append(\"token\", token);\n    const request = await fetch(`${API}/actualizarFotoUsuarioDesdeWeb/${id}`, {\n      method: 'PUT',\n      headers,\n      body: data\n    });\n    const dataRequest = await request.json();\n\n    if (dataRequest.ok) {\n      localStorage.setItem('oliverpetshop_usuario', JSON.stringify(dataRequest.user));\n      dispatch({\n        type: UPDATE_USER,\n        payload: dataRequest.user\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const actualizarUsuario = (data, id) => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    let token = JSON.parse(localStorage.getItem('oliverpetshop_usuario')).token;\n    if (!token) return dispatch({\n      type: ERROR,\n      payload: 'Token incorrecto'\n    });\n    headers.append('token', token);\n    headers.append(\"Content-Type\", \"application/json\");\n    const request = await fetch(`${API}/actualizarUsuarioDesdeWeb/${id}`, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(data)\n    });\n    if (request.status != 200) return dispatch({\n      type: ERROR,\n      payload: 'Ocurrio un error, ¡intentelo más tarde!'\n    });\n    const dataRequest = await request.json();\n\n    if (dataRequest.ok) {\n      localStorage.setItem('oliverpetshop_usuario', JSON.stringify(dataRequest.user));\n      return dispatch({\n        type: UPDATE_USER,\n        payload: dataRequest.user\n      });\n    }\n\n    return dispatch({\n      type: ERROR,\n      payload: dataRequest.info\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error.message\n    });\n  }\n};\nexport const actualizarAddress = (data, id) => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    let token = JSON.parse(localStorage.getItem('oliverpetshop_usuario')).token;\n    if (!token) return dispatch({\n      type: ERROR,\n      payload: 'Token incorrecto'\n    });\n    headers.append('token', token);\n    headers.append(\"Content-Type\", \"application/json\");\n    const request = await fetch(`${API}/actualizarDireccion/${id}`, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(data)\n    });\n    if (request.status != 200) return dispatch({\n      type: ERROR,\n      payload: 'Ocurrio un error, ¡intentelo más tarde!'\n    });\n    const dataRequest = await request.json();\n\n    if (dataRequest.ok) {\n      localStorage.setItem('oliverpetshop_usuario', JSON.stringify(dataRequest.usuario));\n      return dispatch({\n        type: UPDATE_USER,\n        payload: dataRequest.usuario\n      });\n    }\n\n    return dispatch({\n      type: ERROR,\n      payload: dataRequest.info\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error.message\n    });\n  }\n};\nexport const sendEmailForResetPassword = idUsuario => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    let token = JSON.parse(localStorage.getItem('oliverpetshop_usuario')).token;\n    if (!token) return dispatch({\n      type: ERROR,\n      payload: 'Token incorrecto'\n    });\n    headers.append('token', token);\n    headers.append(\"Content-Type\", \"application/json\");\n    const request = await fetch(`${API}/resetPassword`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify({\n        idUsuario\n      })\n    });\n    if (request.status != 200) return dispatch({\n      type: ERROR,\n      payload: 'Ocurrio un error, ¡intentelo más tarde!'\n    });\n    const dataRequest = await request.json();\n\n    if (dataRequest.ok) {\n      return console.log(dataRequest);\n    }\n\n    return dispatch({\n      type: ERROR,\n      payload: dataRequest.info\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: dataRequest.info\n    });\n  }\n};\nexport const updatePassword = (data, token) => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    if (data.confirmNewPassword === '' || data.newPassword === '') {\n      return dispatch({\n        type: ERROR,\n        payload: 'Los dos campos son obligarios.'\n      });\n    }\n\n    if (data.confirmNewPassword != data.newPassword) {\n      return dispatch({\n        type: ERROR,\n        payload: 'Las contraseñas no coinciden.'\n      });\n    }\n\n    let headers = new Headers();\n    headers.append('refresh-token', token);\n    headers.append(\"Content-Type\", \"application/json\");\n    const request = await fetch(`${API}/new-password`, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(data)\n    });\n    if (request.status != 200) return dispatch({\n      type: ERROR,\n      payload: 'Ups, algo ha salido mal...'\n    });\n    dispatch({\n      type: UPDATE_PASSWORD\n    });\n    return setTimeout(() => {\n      window.location.assign(`${PUBLIC_URL}`);\n    }, 5000);\n  } catch (error) {\n    return dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/home/franco/desarrollo/proyecto_oliver/oliver-web-next/store/actions/usuarioActions.js"],"names":["API","PUBLIC_URL","VERIFICAR_SESION","LOGIN","LOGOUT","LOADING","ERROR","UPDATE_USER","UPDATE_PASSWORD","login","data","dispatch","type","email","trim","password","payload","headers","Headers","append","fetch","method","body","JSON","stringify","then","res","json","response","ok","objUsuario","nombre","usuario","foto","token","address","ubicacion","idUsuario","lat","lon","telefono","localStorage","setItem","getItem","info","error","console","log","logout","removeItem","verificarSesion","dataUsuario","parse","tokenSend","request","status","logueado","register","singInWithGoogle","tokenId","googleId","actualizarFoto","id","dataRequest","user","actualizarUsuario","message","actualizarAddress","sendEmailForResetPassword","updatePassword","confirmNewPassword","newPassword","setTimeout","window","location","assign"],"mappings":"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","sourcesContent":["import {API,PUBLIC_URL} from '../../config/index';\nimport {VERIFICAR_SESION,LOGIN,LOGOUT,LOADING,ERROR,UPDATE_USER,UPDATE_PASSWORD} from '../types/usuarioTypes';\n\nexport const login = (data)=>async(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        if(data.email.trim() === '' || data.password.trim() === ''){\n            return dispatch({\n                type:ERROR,\n                payload:'Es necesario completar todos los campos'\n            })\n        }\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        return fetch(`${API}/login`,{\n            method:'POST',\n            body:JSON.stringify(data),\n            headers\n        }).then(res=>res.json()).then(response=>{\n            if(response.ok){\n                let objUsuario = {\n                    nombre:response.usuario.nombre,\n                    email:response.usuario.email,\n                    foto:response.usuario.foto,\n                    token:response.token,\n                    address:response.usuario.ubicacion,\n                    idUsuario:response.usuario.idUsuario,\n                    lat:response.usuario.lat,\n                    lon:response.usuario.lon,\n                    telefono:response.usuario.telefono\n                }\n                localStorage.setItem('oliverpetshop_usuario',JSON.stringify(objUsuario));\n                dispatch({\n                    type:LOGIN,\n                    payload:localStorage.getItem('oliverpetshop_usuario')\n                })\n            }else{\n                return dispatch({\n                    type:ERROR,\n                    payload:response.info\n                })\n            }\n        })\n    } catch (error) {\n        console.log(error);\n        return dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const logout = ()=>async(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        localStorage.removeItem('oliverpetshop_usuario');\n        return dispatch({\n            type:LOGOUT\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const verificarSesion=(token=null)=>async(dispatch)=>{\n    try {\n        let dataUsuario = JSON.parse(localStorage.getItem('oliverpetshop_usuario'));\n        if(dataUsuario || token){\n            // request para verificar que el token corresponda a una sesion activa\n            let headers = new Headers();\n            let tokenSend = (token)?token:dataUsuario.token;\n            headers.append('token',tokenSend);\n            const request = await fetch(`${API}/verify-sesion`,{\n                method:'GET',\n                headers\n            });\n            if(request.status!=200){\n                return dispatch({\n                    type:VERIFICAR_SESION,\n                    payload:{data:null,logueado:false}\n                })\n            }\n            return dispatch({\n                type:VERIFICAR_SESION,\n                payload:{data:dataUsuario,logueado:true}\n            })\n        }\n        return dispatch({\n            type:VERIFICAR_SESION,\n            payload:{data:null,logueado:false}\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const register=(data)=>(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        return fetch(`${API}/register`,{\n            method:'POST',\n            body:JSON.stringify(data),\n            headers\n        }).then(res=>res.json()).then(response=>{\n            if(response.ok){\n                let objUsuario = {\n                    nombre:response.usuario.nombre,\n                    email:response.usuario.email,\n                    foto:response.usuario.foto,\n                    token:response.token,\n                    address:response.usuario.address,\n                    idUsuario:response.usuario.idUsuario\n                }\n                localStorage.setItem('oliverpetshop_usuario',JSON.stringify(objUsuario));\n                dispatch({\n                    type:LOGIN,\n                    payload:localStorage.getItem('oliverpetshop_usuario')\n                });\n            }else{\n                dispatch({\n                    type:ERROR,\n                    payload:response.info\n                })\n            }\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const singInWithGoogle = (tokenId,googleId) => async(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        return fetch(`${API}/google/tokensignin`,{\n            method:'POST',\n            headers,\n            body:JSON.stringify({token:tokenId})\n        }).then(res=>res.json()).then(response=>{\n            if(!response.ok){\n                return dispatch({\n                    type:ERROR,\n                    payload:response.info\n                })\n            };\n            let objUsuario = {\n                nombre:response.usuario.nombre,\n                email:response.usuario.email,\n                foto:response.usuario.foto,\n                token:response.token,\n                address:response.usuario.address,\n                idUsuario:response.usuario.idUsuario,\n                lat:response.usuario.lat,\n                lon:response.usuario.lon,\n                telefono:response.usuario.telefono\n            }\n            localStorage.setItem('oliverpetshop_usuario',JSON.stringify(objUsuario));\n            dispatch({\n                type:LOGIN,\n                payload:localStorage.getItem('oliverpetshop_usuario')\n            });\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const actualizarFoto = (data,id) =>async(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        let headers = new Headers();\n        let token = JSON.parse(localStorage.getItem('oliverpetshop_usuario')).token;\n        headers.append(\"token\", token);\n        const request = await fetch(`${API}/actualizarFotoUsuarioDesdeWeb/${id}`,{\n            method:'PUT',\n            headers,\n            body:data\n        });\n        const dataRequest = await request.json();\n        if(dataRequest.ok){\n            localStorage.setItem('oliverpetshop_usuario',JSON.stringify(dataRequest.user));\n            dispatch({\n                type:UPDATE_USER,\n                payload:dataRequest.user\n            })\n        }\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const actualizarUsuario = (data,id)=>async dispatch=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        let headers = new Headers();\n        let token = JSON.parse(localStorage.getItem('oliverpetshop_usuario')).token;\n        if(!token) return dispatch({type:ERROR,payload:'Token incorrecto'});\n        headers.append('token',token);\n        headers.append(\"Content-Type\", \"application/json\");\n        const request = await fetch(`${API}/actualizarUsuarioDesdeWeb/${id}`,{\n            method:'PUT',\n            headers,\n            body:JSON.stringify(data)\n        });\n        if(request.status!=200) return dispatch({type:ERROR,payload:'Ocurrio un error, ¡intentelo más tarde!'})\n        const dataRequest = await request.json();\n        if(dataRequest.ok){\n            localStorage.setItem('oliverpetshop_usuario',JSON.stringify(dataRequest.user));\n            return dispatch({\n                type:UPDATE_USER,\n                payload:dataRequest.user\n            })\n        }\n        return dispatch({\n            type:ERROR,\n            payload:dataRequest.info\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error.message\n        })\n    }\n}\n\nexport const actualizarAddress = (data,id)=>async dispatch=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        let headers = new Headers();\n        let token = JSON.parse(localStorage.getItem('oliverpetshop_usuario')).token;\n        if(!token) return dispatch({type:ERROR,payload:'Token incorrecto'});\n        headers.append('token',token);\n        headers.append(\"Content-Type\", \"application/json\");\n        const request = await fetch(`${API}/actualizarDireccion/${id}`,{\n            method:'PUT',\n            headers,\n            body:JSON.stringify(data)\n        });\n        if(request.status!=200) return dispatch({type:ERROR,payload:'Ocurrio un error, ¡intentelo más tarde!'})\n        const dataRequest = await request.json();\n        if(dataRequest.ok){\n            localStorage.setItem('oliverpetshop_usuario',JSON.stringify(dataRequest.usuario));\n            return dispatch({\n                type:UPDATE_USER,\n                payload:dataRequest.usuario\n            })\n        }\n        return dispatch({\n            type:ERROR,\n            payload:dataRequest.info\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error.message\n        }) \n    }\n}\n\nexport const sendEmailForResetPassword = idUsuario=> async dispatch=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        let headers = new Headers();\n        let token = JSON.parse(localStorage.getItem('oliverpetshop_usuario')).token;\n        if(!token) return dispatch({type:ERROR,payload:'Token incorrecto'});\n        headers.append('token',token);\n        headers.append(\"Content-Type\", \"application/json\");\n        const request = await fetch(`${API}/resetPassword`,{\n            method:'POST',\n            headers,\n            body:JSON.stringify({idUsuario})\n        });\n        if(request.status!=200) return dispatch({type:ERROR,payload:'Ocurrio un error, ¡intentelo más tarde!'})\n        const dataRequest = await request.json();\n        if(dataRequest.ok){\n            return console.log(dataRequest);\n        }\n        return dispatch({\n            type:ERROR,\n            payload:dataRequest.info\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:dataRequest.info\n        })\n    }\n}\n\nexport const updatePassword = (data,token) => async dispatch=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        if(data.confirmNewPassword === '' || data.newPassword ===''){\n            return dispatch({\n                type:ERROR,\n                payload:'Los dos campos son obligarios.'\n            });\n        }\n        if(data.confirmNewPassword != data.newPassword){\n            return dispatch({\n                type:ERROR,\n                payload:'Las contraseñas no coinciden.'\n            });\n        }\n        let headers = new Headers();\n        headers.append('refresh-token',token);\n        headers.append(\"Content-Type\", \"application/json\");\n        const request = await fetch(`${API}/new-password`,{\n            method:'PUT',\n            headers,\n            body:JSON.stringify(data)\n        });\n        if(request.status!=200) return dispatch({\n            type:ERROR,\n            payload:'Ups, algo ha salido mal...'\n        });\n        dispatch({\n            type:UPDATE_PASSWORD\n        });\n        return setTimeout(() => {\n            window.location.assign(`${PUBLIC_URL}`);\n        }, 5000);\n    } catch (error) {\n        return dispatch({\n            type:ERROR,\n            payload:error\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}