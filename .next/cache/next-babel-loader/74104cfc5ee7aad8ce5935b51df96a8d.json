{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { API } from '../../config/index';\nimport { TRAER_ZONAS, SELECCIONAR, LOADING, ERROR } from '../types/zonasTypes';\nexport var traerTodas = function traerTodas() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var dataUser, myHeaders, zonasApi, dataZonas;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n              _context.prev = 1;\n              dataUser = JSON.parse(localStorage.getItem('oliverpetshop_usuario'));\n              myHeaders = new Headers();\n              myHeaders.append(\"token\", dataUser.token);\n              _context.next = 7;\n              return fetch(\"\".concat(API, \"/zonas\"), {\n                headers: myHeaders\n              });\n\n            case 7:\n              zonasApi = _context.sent;\n              _context.next = 10;\n              return zonasApi.json();\n\n            case 10:\n              dataZonas = _context.sent;\n              console.log(dataZonas);\n              dispatch({\n                type: TRAER_ZONAS,\n                payload: dataZonas.data\n              });\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch({\n                type: ERROR,\n                payload: _context.t0\n              });\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 15]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var seleccionar = function seleccionar(id) {\n  return function (dispatch, getState) {\n    var zonas = getState().zonasReducer.zonas;\n    var zona = zonas.filter(function (z) {\n      return z.idZona == id;\n    });\n\n    if (!zona.length) {\n      dispatch({\n        type: ERROR,\n        payload: 'No se encontro la zona'\n      });\n      return;\n    }\n\n    zona = zona[0];\n    dispatch({\n      type: SELECCIONAR,\n      payload: zona\n    });\n  };\n};","map":{"version":3,"sources":["/home/franco/desarrollo/proyecto_oliver/oliver-web-next/store/actions/zonasActions.js"],"names":["API","TRAER_ZONAS","SELECCIONAR","LOADING","ERROR","traerTodas","dispatch","type","dataUser","JSON","parse","localStorage","getItem","myHeaders","Headers","append","token","fetch","headers","zonasApi","json","dataZonas","console","log","payload","data","seleccionar","id","getState","zonas","zonasReducer","zona","filter","z","idZona","length"],"mappings":";;AAAA,SAAQA,GAAR,QAAkB,oBAAlB;AACA,SAAQC,WAAR,EAAoBC,WAApB,EAAgCC,OAAhC,EAAwCC,KAAxC,QAAoD,qBAApD;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA,wEAAI,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BA,cAAAA,QAAQ,CAAC;AACLC,gBAAAA,IAAI,EAACJ;AADA,eAAD,CAAR;AAD0B;AAKhBK,cAAAA,QALgB,GAKLC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,uBAArB,CAAX,CALK;AAMlBC,cAAAA,SANkB,GAMN,IAAIC,OAAJ,EANM;AAOtBD,cAAAA,SAAS,CAACE,MAAV,CAAiB,OAAjB,EAA0BP,QAAQ,CAACQ,KAAnC;AAPsB;AAAA,qBAQCC,KAAK,WAAIjB,GAAJ,aAAgB;AAACkB,gBAAAA,OAAO,EAACL;AAAT,eAAhB,CARN;;AAAA;AAQhBM,cAAAA,QARgB;AAAA;AAAA,qBASEA,QAAQ,CAACC,IAAT,EATF;;AAAA;AAShBC,cAAAA,SATgB;AAUtBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAf,cAAAA,QAAQ,CAAC;AACLC,gBAAAA,IAAI,EAACN,WADA;AAELuB,gBAAAA,OAAO,EAACH,SAAS,CAACI;AAFb,eAAD,CAAR;AAXsB;AAAA;;AAAA;AAAA;AAAA;AAgBtBnB,cAAAA,QAAQ,CAAC;AACLC,gBAAAA,IAAI,EAACH,KADA;AAELoB,gBAAAA,OAAO;AAFF,eAAD,CAAR;;AAhBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAuBP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAAC,EAAE;AAAA,SAAG,UAACrB,QAAD,EAAUsB,QAAV,EAAqB;AAAA,QAC1CC,KAD0C,GACjCD,QAAQ,GAAGE,YADsB,CAC1CD,KAD0C;AAEjD,QAAIE,IAAI,GAAGF,KAAK,CAACG,MAAN,CAAa,UAAAC,CAAC;AAAA,aAAEA,CAAC,CAACC,MAAF,IAAYP,EAAd;AAAA,KAAd,CAAX;;AACA,QAAG,CAACI,IAAI,CAACI,MAAT,EAAgB;AACZ7B,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAACH,KADA;AAELoB,QAAAA,OAAO,EAAC;AAFH,OAAD,CAAR;AAIA;AACH;;AACDO,IAAAA,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAX;AACAzB,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACL,WADA;AAELsB,MAAAA,OAAO,EAACO;AAFH,KAAD,CAAR;AAIH,GAf4B;AAAA,CAAtB","sourcesContent":["import {API} from '../../config/index';\nimport {TRAER_ZONAS,SELECCIONAR,LOADING,ERROR} from '../types/zonasTypes';\n\nexport const traerTodas = ()=>async (dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        const dataUser = JSON.parse(localStorage.getItem('oliverpetshop_usuario'));\n        let myHeaders = new Headers();\n        myHeaders.append(\"token\", dataUser.token);\n        const zonasApi = await fetch(`${API}/zonas`,{headers:myHeaders});\n        const dataZonas = await zonasApi.json();\n        console.log(dataZonas);\n        dispatch({\n            type:TRAER_ZONAS,\n            payload:dataZonas.data\n        });\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const seleccionar = id =>(dispatch,getState)=>{\n    const {zonas} = getState().zonasReducer;\n    let zona = zonas.filter(z=>z.idZona == id);\n    if(!zona.length){\n        dispatch({\n            type:ERROR,\n            payload:'No se encontro la zona'\n        });\n        return;\n    }\n    zona = zona[0];\n    dispatch({\n        type:SELECCIONAR,\n        payload:zona\n    })\n}"]},"metadata":{},"sourceType":"module"}