{"ast":null,"code":"import { API } from '../../config/index';\nimport { isMobile } from '../../helpers/index';\nimport { TRAER_TODOS, TRAER_UNO, LOADING, ERROR, TRAER_PROMOCIONES, ORDENAR_PRODUCTOS, FILTRANDO, LOADING_MAS, TRAER_MAS, TRAER_OFERTAS, APLICAR_FILTRO_CATEGORIA, APLICAR_FILTRO_SUBCATEGORIA, APLICAR_FILTRO_MARCA, APLICAR_FILTRO_BUSCADOR, APLICAR_FILTRO_ORDEN, ELIMINAR_FILTRO_CATEGORIA, ELIMINAR_FILTRO_SUBCATEGORIA, ELIMINAR_FILTRO_MARCA, ELIMINAR_FILTRO_BUSCADOR, ELIMINAR_FILTRO_ORDEN, PRODUCTOS_RESTABLECER_FILTROS, PRODUCTOS_PAGINACION } from '../types/productosTypes';\nexport const traerProductos = () => async (dispatch, getState) => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    //obtengo el estado actualizado de los filtros\n    const {\n      filtrando,\n      filtros: {\n        categoria,\n        subcategoria,\n        marca,\n        search,\n        orden\n      },\n      paginacion: {\n        desde,\n        limiteMobile,\n        limiteDesktop\n      }\n    } = getState().productosReducer;\n    let url = `${API}`;\n\n    if (!filtrando) {\n      url += `/producto?desde=${desde}&limite=${isMobile() ? limiteMobile : limiteDesktop}`;\n    } else {\n      if (search.trim() !== \"\") {\n        url += `/buscar?busqueda=${search}`;\n      } else {\n        url += `/productos/filtro/filtrar?desde=${desde}&limite=${isMobile() ? limiteMobile : limiteDesktop}&`;\n\n        if (categoria) {\n          url += `categoria=${categoria}&`;\n        }\n\n        if (subcategoria) {\n          url += `subcategoria=${subcategoria}&`;\n        }\n\n        if (marca) {\n          url += `marca=${marca}`;\n        }\n      }\n    } // console.log(url);\n\n\n    return fetch(url).then(res => res.json()).then(data => {\n      dispatch({\n        type: TRAER_TODOS,\n        payload: data.data\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const traerMas = () => async (dispatch, getState) => {\n  dispatch({\n    type: LOADING_MAS\n  });\n\n  try {\n    //obtengo el estado actualizado de los filtros\n    const {\n      productos,\n      filtrando,\n      filtros: {\n        categoria,\n        subcategoria,\n        marca,\n        search,\n        orden\n      },\n      paginacion: {\n        desde,\n        limiteMobile,\n        limiteDesktop\n      }\n    } = getState().productosReducer;\n    let url = `${API}`;\n\n    if (!filtrando) {\n      url += `/producto?desde=${desde}&limite=${isMobile() ? limiteMobile : limiteDesktop}`;\n    } else {\n      if (search.trim() !== \"\") {\n        url += `/buscar?busqueda=${search}`;\n      } else {\n        url += `/productos/filtro/filtrar?desde=${desde}&limite=${isMobile() ? limiteMobile : limiteDesktop}&`;\n\n        if (categoria) {\n          url += `categoria=${categoria}&`;\n        }\n\n        if (subcategoria) {\n          url += `subcategoria=${subcategoria}&`;\n        }\n\n        if (marca) {\n          url += `marca=${marca}`;\n        }\n      }\n    }\n\n    return fetch(url).then(res => res.json()).then(data => {\n      let updateproductos = [...productos, ...data.data];\n      dispatch({\n        type: TRAER_MAS,\n        payload: updateproductos\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const traerPorId = id => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    return fetch(`${API}/producto/${id}`).then(res => res.json()).then(data => {\n      dispatch({\n        type: TRAER_UNO,\n        payload: data\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const traerPromociones = () => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let url = `${API}/subproductos/ofertas?desde=0&limite=9`;\n\n    if (isMobile()) {\n      url = `${API}/subproductos/ofertas?desde=0&limite=6`;\n    }\n\n    return fetch(url).then(res => res.json()).then(data => {\n      dispatch({\n        type: TRAER_OFERTAS,\n        payload: data.data\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error.message\n    });\n  }\n};\nexport const ordenarProductos = productosOrdenados => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    dispatch({\n      type: ORDENAR_PRODUCTOS,\n      payload: productosOrdenados\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const aplicarFiltro = (tipo, valor) => dispatch => {\n  switch (tipo) {\n    case 'categoria':\n      dispatch({\n        type: APLICAR_FILTRO_CATEGORIA,\n        payload: valor\n      });\n      break;\n\n    case 'subcategoria':\n      dispatch({\n        type: APLICAR_FILTRO_SUBCATEGORIA,\n        payload: valor\n      });\n      break;\n\n    case 'marca':\n      dispatch({\n        type: APLICAR_FILTRO_MARCA,\n        payload: valor\n      });\n      break;\n\n    case 'search':\n      dispatch({\n        type: APLICAR_FILTRO_BUSCADOR,\n        payload: valor\n      });\n      break;\n\n    case 'orden':\n      dispatch({\n        type: APLICAR_FILTRO_ORDEN,\n        payload: valor\n      });\n      break;\n\n    default:\n      break;\n  }\n};\nexport const quitarFiltro = tipo => (dispatch, getState) => {\n  const {\n    filtros: {\n      categoria,\n      subcategoria,\n      marca,\n      search,\n      orden\n    }\n  } = getState().productosReducer;\n\n  switch (tipo) {\n    case 'categoria':\n      if (!subcategoria && !marca) {\n        dispatch({\n          type: PRODUCTOS_RESTABLECER_FILTROS\n        });\n      } else {\n        dispatch({\n          type: ELIMINAR_FILTRO_CATEGORIA\n        });\n      }\n\n      break;\n\n    case 'subcategoria':\n      if (!categoria && !marca) {\n        dispatch({\n          type: PRODUCTOS_RESTABLECER_FILTROS\n        });\n      } else {\n        dispatch({\n          type: ELIMINAR_FILTRO_SUBCATEGORIA\n        });\n      }\n\n      break;\n\n    case 'marca':\n      if (!categoria && !subcategoria) {\n        dispatch({\n          type: PRODUCTOS_RESTABLECER_FILTROS\n        });\n      } else {\n        dispatch({\n          type: ELIMINAR_FILTRO_MARCA\n        });\n      }\n\n      break;\n\n    case 'buscador':\n      dispatch({\n        type: ELIMINAR_FILTRO_BUSCADOR\n      });\n      break;\n\n    case 'orden':\n      dispatch({\n        type: ELIMINAR_FILTRO_ORDEN\n      });\n      break;\n\n    default:\n      break;\n  }\n};\nexport const restablecerFiltros = () => dispatch => {\n  dispatch({\n    type: PRODUCTOS_RESTABLECER_FILTROS\n  });\n};\nexport const updatePaginacion = () => (dispatch, getState) => {\n  const {\n    paginacion\n  } = getState().productosReducer;\n  let desdeUpdated = isMobile() ? paginacion.desde + paginacion.limiteMobile : paginacion.desde + paginacion.limiteDesktop;\n  dispatch({\n    type: PRODUCTOS_PAGINACION,\n    payload: desdeUpdated\n  });\n};","map":null,"metadata":{},"sourceType":"module"}