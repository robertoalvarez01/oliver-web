{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport CardUbicacion from '../../src/components/CardUbicacion/index';\nimport OpcionesEnvio from '../../src/components/OpcionesEnvio';\nimport ZonaEnvio from '../../src/components/ZonaEnvio';\nimport Head from '../../src/components/Head';\nimport DetalleProductos from '../../src/components/DetalleProductos';\nimport Error from '../../src/components/Error';\nimport { connect } from 'react-redux';\nimport * as usuarioActions from '../../store/actions/usuarioActions';\nimport { API, MP_AC_TOKEN, URL_PROCESAR_VENTA } from '../../config/index';\nimport Loader from '../../src/components/Loader/index';\nimport MediosDePago from '../../src/components/MediosDePago';\nimport Modal from '../../src/components/Modal'; //import Router from 'next/router';\n//import FormVenta from '../../src/components/FormVenta';\n\nconst Swal = require('sweetalert2');\n\nconst {\n  verificarSesion\n} = usuarioActions;\n\nconst Checkout = props => {\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: modalIsOpen,\n    1: setModalIsOpen\n  } = useState(false); //modal para mostrar el form de datos de tarjeta\n\n  useEffect(() => {\n    props.verificarSesion();\n    document.getElementsByTagName('body')[0].style.overflowY = 'scroll';\n  }, []); //console.log(URL_PROCESAR_VENTA);\n\n  const handleClick = () => {\n    const {\n      usuario\n    } = props.usuarioReducer;\n    const {\n      tipos: envio\n    } = props.enviosReducer;\n    const {\n      zona\n    } = props.zonasReducer;\n    const {\n      tipoEnvio,\n      idZona,\n      idMedioPago,\n      total,\n      subtotal,\n      productos,\n      porcentaje_descuento,\n      descuento,\n      totalEnvio\n    } = props.ventaReducer;\n\n    if (!envio.local) {\n      if (!usuario.address || usuario.address === '') return setError('Es obligatorio completar tu ubicación.');\n      if (!zona) return setError('En caso de no retirarlo por nuestro local, es obligatorio completar la zona de envío.');\n    }\n\n    setError(false);\n    setLoading(true);\n    const {\n      idUsuario,\n      token,\n      nombre,\n      email,\n      telefono,\n      address\n    } = usuario;\n\n    if (idMedioPago == '1') {\n      //guardo data de envio para luego de hacer el checkout de mercado pago, envio los datos al servidor para registrar la venta con el envio correspondiente.\n      localStorage.setItem('dataEnvio', JSON.stringify({\n        tipo: tipoEnvio,\n        zona: idZona\n      }));\n      let headers = new Headers();\n      headers.append('Authorization', `Bearer ${MP_AC_TOKEN}`);\n      headers.append(\"Content-Type\", \"application/json\");\n      let items = [];\n      productos.map(prd => {\n        items.push({\n          id: prd.idSubProducto,\n          title: prd.subProducto,\n          currency_id: \"ARS\",\n          picture_url: prd.foto,\n          description: prd.producto + ' (' + prd.tamaño + ')',\n          quantity: prd.cantidad,\n          unit_price: prd.precio\n        });\n      });\n      let preference = {\n        items,\n        payer: {\n          name: nombre,\n          email: email,\n          phone: {\n            area_code: \"11\",\n            number: telefono\n          },\n          address: {\n            street_name: address\n          }\n        },\n        back_urls: {\n          success: URL_PROCESAR_VENTA,\n          failure: URL_PROCESAR_VENTA,\n          pending: URL_PROCESAR_VENTA\n        },\n        payment_methods: {\n          excluded_payment_types: [{\n            id: \"ticket\"\n          }],\n          installments: 1\n        },\n        // notification_url: \"https://hookb.in/7ZZKJPB89aFa99D3y3eo\",\n        statement_descriptor: \"OLIVER_PETSHOP\",\n        external_reference: \"\",\n        shipments: {\n          mode: \"not_specified\",\n          cost: totalEnvio,\n          receiver_address: {\n            street_name: address\n          }\n        }\n      };\n      fetch('https://api.mercadopago.com/checkout/preferences', {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(preference)\n      }).then(res => res.json()).then(data => {\n        window.location.assign(data.init_point);\n      });\n      return;\n    }\n\n    let dataToRequest = {\n      envio: {\n        idZona,\n        tipo: tipoEnvio\n      },\n      venta: {\n        subtotal,\n        porcentaje_descuento,\n        descuento,\n        total,\n        idUsuario,\n        productos,\n        idMedioPago\n      }\n    };\n    return registrarVenta(dataToRequest, token);\n  };\n\n  const registrarVenta = async (data, token) => {\n    try {\n      const headers = new Headers();\n      headers.append('token', token);\n      headers.append(\"Content-Type\", \"application/json\");\n      let url = `${API}/ventas/registrarVenta`;\n      const reqVenta = await fetch(url, {\n        headers,\n        method: 'POST',\n        body: JSON.stringify(data)\n      });\n\n      if (reqVenta.status == 200) {\n        localStorage.removeItem('dataEnvio');\n        localStorage.removeItem('carrito');\n        Swal.fire('Listo', 'Su compra se ha registrado con éxito, solo resta que se dirija a nuestro local para hacerse con su producto.', 'success').then(() => window.location.assign('/'));\n      } else {\n        setLoading(false);\n        Swal.fire('Error', 'Ha ocurrido un error al momento de registrar la venta, intentalo más tarde', 'error');\n      }\n    } catch (error) {\n      setLoading(false);\n      Swal.fire('Error', 'Ha ocurrido un error al momento de registrar la venta, intentalo más tarde', 'error');\n      console.log(error.message);\n    }\n  };\n\n  if (error) {\n    Swal.fire('Atención', error, 'warning').then(() => setError(false));\n  }\n\n  const habilitarModal = () => {\n    setModalIsOpen(!modalIsOpen);\n  };\n\n  return !props.usuarioReducer.logueado ? __jsx(\"div\", {\n    className: \"mt-3\"\n  }, __jsx(Error, {\n    message: \"No puedes realizar una compra sin tener una sesi\\xF3n activa.\"\n  })) : __jsx(React.Fragment, null, loading ? __jsx(\"div\", {\n    className: \"container-loader\"\n  }, __jsx(Loader, null)) : null, __jsx(Head, {\n    title: \"Oliver Pet Shop\"\n  }), __jsx(\"div\", {\n    className: \"jsx-2581472546\" + \" \" + \"container mb-4\"\n  }, __jsx(\"div\", {\n    className: \"jsx-2581472546\" + \" \" + \"row\"\n  }, __jsx(\"div\", {\n    className: \"jsx-2581472546\" + \" \" + \"col-12 col-md-8 pt-4\"\n  }, __jsx(\"h2\", {\n    className: \"jsx-2581472546\"\n  }, \"\\xDAltimos pasos para terminar tu compra\"), __jsx(CardUbicacion, null), __jsx(\"div\", {\n    className: \"jsx-2581472546\" + \" \" + \"alert alert-warning mt-3\"\n  }, __jsx(\"b\", {\n    className: \"jsx-2581472546\"\n  }, \"Atenci\\xF3n:\"), \" S\\xED desea retirar su compra en nuestro local, no es necesario que seleccione una zona de env\\xEDo\"), __jsx(ZonaEnvio, null), __jsx(\"h2\", {\n    className: \"jsx-2581472546\" + \" \" + \"mt-5\"\n  }, \"Opciones de env\\xEDo\"), __jsx(OpcionesEnvio, null), __jsx(\"h2\", {\n    className: \"jsx-2581472546\" + \" \" + \"mt-5\"\n  }, \"Selecciona un medio de pago\"), __jsx(MediosDePago, null), __jsx(\"button\", {\n    type: \"button\",\n    onClick: handleClick,\n    id: \"btn-continuar\",\n    className: \"jsx-2581472546\" + \" \" + \"btn btn-primary\"\n  }, \"Continuar\"), __jsx(\"div\", {\n    className: \"jsx-2581472546\" + \" \" + \"divTotalMobile\"\n  }, __jsx(\"span\", {\n    id: \"total\",\n    className: \"jsx-2581472546\"\n  }, \"$\", props.ventaReducer.total), __jsx(\"button\", {\n    type: \"button\",\n    onClick: handleClick,\n    className: \"jsx-2581472546\" + \" \" + \"btn btn-primary\"\n  }, \"Continuar\"))), __jsx(\"div\", {\n    className: \"jsx-2581472546\" + \" \" + \"col-12 col-md-4 detalleProductos\"\n  }, __jsx(DetalleProductos, null))), __jsx(_JSXStyle, {\n    id: \"2581472546\"\n  }, [\"h2.jsx-2581472546{font-size:25px;}\", \"button#btn-continuar.jsx-2581472546{float:right;margin-top:20px;}\", \".divTotalMobile.jsx-2581472546{display:none;}\", \"@media(max-width:768px){#btn-continuar.jsx-2581472546{display:none;}.divTotalMobile.jsx-2581472546{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;position:fixed;left:0;right:0px;bottom:0px;background-color:#f7f7f7;padding:16px;box-shadow:0 -2px 8px 2px rgba(0,0,0,.15);border-width:0 1px 1px;font-family:'Quicksand',sans-serif;}.detalleProductos.jsx-2581472546{display:none;}}\"])), modalIsOpen ? __jsx(Modal, {\n    closeModal: habilitarModal\n  }, __jsx(FormVenta, {\n    closeModal: habilitarModal\n  })) : null);\n};\n\nconst mapStateToProps = ({\n  usuarioReducer,\n  enviosReducer,\n  ventaReducer,\n  zonasReducer\n}) => {\n  return {\n    ventaReducer,\n    usuarioReducer,\n    enviosReducer,\n    zonasReducer\n  };\n};\n\nconst mapDispatchToProps = {\n  verificarSesion\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Checkout);","map":null,"metadata":{},"sourceType":"module"}