{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n//import {API} from '../config/index';\nimport { TRAER_PRODUCTOS, AGREGAR_PRODUCTO, ELIMINAR_PRODUCTO, LOADING, ERROR, CAMBIAR_MEDIO_DE_PAGO, CAMBIAR_COSTO_ENVIO } from '../types/carritoTypes';\nexport var traerProductos = function traerProductos() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var productos, subtotal, payloadData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n              _context.prev = 1;\n              _context.next = 4;\n              return JSON.parse(localStorage.getItem('carrito'));\n\n            case 4:\n              productos = _context.sent;\n              subtotal = 0;\n              productos.forEach(function (prd) {\n                subtotal += parseInt(prd.precio * prd.cantidad);\n              });\n              payloadData = {\n                productos: productos,\n                subtotal: subtotal\n              };\n              return _context.abrupt(\"return\", dispatch({\n                type: TRAER_PRODUCTOS,\n                payload: payloadData\n              }));\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", dispatch({\n                type: ERROR,\n                payload: _context.t0\n              }));\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var agregarProducto = function agregarProducto(producto) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n      var productos, listProductosUpgrade, productoRepetido, restantes, prds, subtotal, payloadData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n\n              try {\n                //productos que hay en el reducer\n                productos = getState().carritoReducer.productos;\n                productoRepetido = productos.filter(function (res) {\n                  return res.idSubProducto == producto.idSubProducto;\n                });\n\n                if (productoRepetido.length > 0) {\n                  //si se intenta agregar de nuevo el mismo producto, se suma la cantidad, no todo el producto.\n                  productoRepetido[0].cantidad = productoRepetido[0].cantidad + producto.cantidad;\n                  restantes = productos.filter(function (newRes) {\n                    return newRes.idSubProducto != productoRepetido[0].idSubProducto;\n                  });\n\n                  if (restantes.length > 0) {\n                    listProductosUpgrade = [].concat(_toConsumableArray(restantes), [productoRepetido[0]]);\n                  } else {\n                    listProductosUpgrade = [productoRepetido[0]];\n                  }\n                } else {\n                  listProductosUpgrade = [].concat(_toConsumableArray(productos), [producto]);\n                } //actualizo localstorage\n\n\n                localStorage.setItem('carrito', JSON.stringify(listProductosUpgrade)); //calculo el subtotal\n\n                prds = JSON.parse(localStorage.getItem('carrito'));\n                subtotal = 0;\n                prds.forEach(function (prd) {\n                  subtotal += parseInt(prd.precioUnidad * prd.cantidad);\n                });\n                payloadData = {\n                  listProductosUpgrade: listProductosUpgrade,\n                  subtotal: subtotal\n                };\n                setTimeout(function () {\n                  dispatch({\n                    type: AGREGAR_PRODUCTO,\n                    payload: payloadData\n                  });\n                }, 1500);\n              } catch (error) {\n                dispatch({\n                  type: ERROR,\n                  payload: error\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var eliminarProducto = function eliminarProducto(idSubProducto) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n      var productos, newProductos, prds, subtotal, payloadData;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n\n              try {\n                productos = getState().carritoReducer.productos; //filtro los productos que no tengan el idProducto que se recibi√≥. entonces elimino ese producto y actualizo el reducer.\n\n                newProductos = productos.filter(function (newArray) {\n                  return newArray.idSubProducto !== idSubProducto;\n                }); //console.log(newProductos);\n\n                localStorage.setItem('carrito', JSON.stringify(newProductos)); //calculo el subtotal\n\n                prds = JSON.parse(localStorage.getItem('carrito'));\n                subtotal = 0;\n                prds.forEach(function (prd) {\n                  subtotal += parseInt(prd.precio * prd.cantidad);\n                });\n                payloadData = {\n                  newProductos: newProductos,\n                  subtotal: subtotal\n                };\n                dispatch({\n                  type: ELIMINAR_PRODUCTO,\n                  payload: payloadData\n                });\n              } catch (error) {\n                dispatch({\n                  type: ERROR,\n                  payload: error\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var cambiarMedioDePago = function cambiarMedioDePago(idMedioDePago) {\n  return function (dispatch) {\n    return dispatch({\n      type: CAMBIAR_MEDIO_DE_PAGO,\n      payload: idMedioDePago\n    });\n  };\n};\nexport var setCostoEnvio = function setCostoEnvio(costo) {\n  return function (dispatch) {\n    return dispatch({\n      type: CAMBIAR_COSTO_ENVIO,\n      payload: costo\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"module"}