{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Head from '../../src/components/Head';\nimport Loader from '../../src/components/Loader';\nimport { connect } from 'react-redux';\nimport * as carritoActions from '../../store/actions/carritoActions';\nimport * as enviosActions from '../../store/actions/enviosActions';\nimport * as zonasActions from '../../store/actions/zonasActions';\nimport * as ventasActions from '../../store/actions/ventasActions';\nimport { useEffect, useState } from 'react';\nimport { API } from '../../config/index';\nimport Error from '../../src/components/Error';\n\nconst Swal = require('sweetalert2');\n\nconst {\n  traerProductos: carritoTraerProductos\n} = carritoActions;\nconst {\n  guardar: enviosGuardar\n} = enviosActions;\nconst {\n  seleccionar: zonasGuardar,\n  traerTodas: traerZonas\n} = zonasActions;\nconst {\n  init: inicializarStoreVenta,\n  setCostoEnvio: setDataEnvioEnVenta\n} = ventasActions;\n\nconst ProcesarVenta = props => {\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  const {\n    carritoReducer,\n    ventaReducer,\n    carritoTraerProductos,\n    enviosGuardar,\n    zonasGuardar,\n    inicializarStoreVenta,\n    setDataEnvioEnVenta,\n    traerZonas,\n    payment_id,\n    status,\n    collection_id\n  } = props;\n  const {\n    usuario,\n    logueado\n  } = props.usuarioReducer;\n  const {\n    zonas,\n    zona\n  } = props.zonasReducer;\n  const {\n    idMedioPago,\n    tipoEnvio,\n    productos,\n    cantidad,\n    subtotal,\n    porcentaje_descuento,\n    descuento,\n    total\n  } = props.ventaReducer;\n  useEffect(() => {\n    if (status == 'approved') {\n      return traerZonas();\n    }\n\n    setError(true);\n  }, []);\n  useEffect(() => {\n    if (logueado && zonas.length > 0) {\n      const dataEnvio = JSON.parse(localStorage.getItem('dataEnvio'));\n      enviosGuardar(dataEnvio.tipo);\n      zonasGuardar(dataEnvio.zona);\n      carritoTraerProductos();\n    }\n  }, [logueado, zonas]);\n  useEffect(() => {\n    if (carritoReducer.productos.length > 0) {\n      inicializarStoreVenta();\n      setDataEnvioEnVenta();\n    }\n  }, [carritoReducer.productos]);\n  useEffect(() => {\n    if (!tipoEnvio || !productos.length || cantidad == 0 || total == 0) {\n      console.log('no se puede completar la operacion');\n      return;\n    }\n\n    const {\n      idUsuario\n    } = usuario;\n    let dataToRequest = {\n      envio: {\n        idZona: zona.idZona,\n        tipo: tipoEnvio\n      },\n      venta: {\n        subtotal,\n        porcentaje_descuento,\n        descuento,\n        total,\n        productos,\n        collection_id,\n        payment_id,\n        idMedioPago,\n        idUsuario\n      }\n    }; //console.log(dataToRequest);\n\n    registrarVenta(dataToRequest);\n  }, [ventaReducer]);\n\n  const registrarVenta = async data => {\n    try {\n      const headers = new Headers();\n      headers.append('token', usuario.token);\n      headers.append(\"Content-Type\", \"application/json\");\n      let url = `${API}/ventas/registrarVenta`;\n      const reqVenta = await fetch(url, {\n        headers,\n        method: 'POST',\n        body: JSON.stringify(data)\n      });\n\n      if (reqVenta.status == 200) {\n        localStorage.removeItem('dataEnvio');\n        localStorage.removeItem('carrito');\n        Swal.fire('Listo', 'Felicidades, tu compra se registró con éxito. En breve nos comunicaremos con usted para informarle el estado de su compra vía email.', 'success').then(() => window.location.assign('/'));\n      } else {\n        setError(true);\n      }\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  return error ? __jsx(Error, {\n    message: \"Ha ocurrido un error, intentalo mas tarde\"\n  }) : __jsx(React.Fragment, null, __jsx(Head, {\n    title: \"Finalizacion de compra\",\n    metadesc: \"\"\n  }), __jsx(\"div\", {\n    className: \"jsx-2063553454\" + \" \" + \"wrapper\"\n  }, __jsx(Loader, null), __jsx(\"p\", {\n    className: \"jsx-2063553454\"\n  }, \"Su compra esta siento procesada, aguarde unos segundos...\")), __jsx(_JSXStyle, {\n    id: \"2063553454\"\n  }, [\".wrapper.jsx-2063553454{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:90vh;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}\"]));\n};\n\nProcesarVenta.getInitialProps = async ({\n  query\n}) => {\n  const {\n    collection_id,\n    payment_id,\n    status\n  } = query;\n  return {\n    collection_id,\n    payment_id,\n    status\n  };\n};\n\nconst mapStateToProps = ({\n  carritoReducer,\n  enviosReducer,\n  usuarioReducer,\n  zonasReducer,\n  ventaReducer\n}) => {\n  return {\n    carritoReducer,\n    enviosReducer,\n    usuarioReducer,\n    zonasReducer,\n    ventaReducer\n  };\n};\n\nconst mapDispatchToProps = {\n  enviosGuardar,\n  carritoTraerProductos,\n  zonasGuardar,\n  setDataEnvioEnVenta,\n  inicializarStoreVenta,\n  traerZonas\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ProcesarVenta);","map":null,"metadata":{},"sourceType":"module"}