{"ast":null,"code":"import { API } from '../../config/index';\nimport { VERIFICAR_SESION, LOGIN, LOGOUT, LOADING, ERROR } from '../types/usuarioTypes';\nexport const login = data => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    if (data.email.trim() === '' || data.password.trim() === '') {\n      return dispatch({\n        type: ERROR,\n        payload: 'Es necesario completar todos los campos'\n      });\n    }\n\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    return fetch(`${API}/login`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers\n    }).then(res => res.json()).then(response => {\n      if (response.ok) {\n        let objUsuario = {\n          nombre: response.usuario.nombre,\n          email: response.usuario.email,\n          foto: response.usuario.foto\n        };\n        localStorage.setItem('oliverpetshop_usuario', JSON.stringify(objUsuario));\n        dispatch({\n          type: LOGIN,\n          payload: localStorage.getItem('oliverpetshop_usuario')\n        });\n      } else {\n        return dispatch({\n          type: ERROR,\n          payload: response.info\n        });\n      }\n    });\n  } catch (error) {\n    console.log(error);\n    return dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    localStorage.removeItem('oliverpetshop_usuario');\n    return dispatch({\n      type: LOGOUT\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const verificarSesion = () => async dispatch => {\n  try {\n    let dataUsuario = localStorage.getItem('oliverpetshop_usuario');\n\n    if (dataUsuario) {\n      return dispatch({\n        type: VERIFICAR_SESION,\n        payload: true\n      });\n    }\n\n    return dispatch({\n      type: VERIFICAR_SESION,\n      payload: false\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const register = data => dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    return fetch(`${API}register`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers\n    }).then(res => res.json()).then(response => {\n      if (response.ok) {\n        let objUsuario = {\n          nombre: response.usuario.nombre,\n          email: response.usuario.email,\n          foto: response.usuario.foto\n        };\n        localStorage.setItem('oliverpetshop_usuario', JSON.stringify(objUsuario));\n        dispatch({\n          type: LOGIN,\n          payload: localStorage.getItem('oliverpetshop_usuario')\n        });\n      } else {\n        dispatch({\n          type: ERROR,\n          payload: response.info\n        });\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const singInWithGoogle = tokenId => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    return fetch(`${API}google/tokensignin`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify({\n        token: tokenId\n      })\n    }).then(res => res.json()).then(response => {\n      if (!response.ok) {\n        return dispatch({\n          type: ERROR,\n          payload: response.info\n        });\n      }\n\n      ;\n      let objUsuario = {\n        nombre: response.usuario.nombre,\n        email: response.usuario.email,\n        foto: response.usuario.foto\n      };\n      localStorage.setItem('oliverpetshop_usuario', JSON.stringify(objUsuario));\n      dispatch({\n        type: LOGIN,\n        payload: localStorage.getItem('oliverpetshop_usuario')\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/home/franco/desarrollo/proyecto_oliver/oliver-web-next/store/actions/usuarioActions.js"],"names":["API","VERIFICAR_SESION","LOGIN","LOGOUT","LOADING","ERROR","login","data","dispatch","type","email","trim","password","payload","headers","Headers","append","fetch","method","body","JSON","stringify","then","res","json","response","ok","objUsuario","nombre","usuario","foto","localStorage","setItem","getItem","info","error","console","log","logout","removeItem","verificarSesion","dataUsuario","register","singInWithGoogle","tokenId","token"],"mappings":"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","sourcesContent":["import {API} from '../../config/index';\nimport {VERIFICAR_SESION,LOGIN,LOGOUT,LOADING,ERROR} from '../types/usuarioTypes';\n\nexport const login = (data)=>async(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        if(data.email.trim() === '' || data.password.trim() === ''){\n            return dispatch({\n                type:ERROR,\n                payload:'Es necesario completar todos los campos'\n            })\n        }\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        return fetch(`${API}/login`,{\n            method:'POST',\n            body:JSON.stringify(data),\n            headers\n        }).then(res=>res.json()).then(response=>{\n            if(response.ok){\n                let objUsuario = {\n                    nombre:response.usuario.nombre,\n                    email:response.usuario.email,\n                    foto:response.usuario.foto\n                }\n                localStorage.setItem('oliverpetshop_usuario',JSON.stringify(objUsuario));\n                dispatch({\n                    type:LOGIN,\n                    payload:localStorage.getItem('oliverpetshop_usuario')\n                })\n            }else{\n                return dispatch({\n                    type:ERROR,\n                    payload:response.info\n                })\n            }\n        })\n    } catch (error) {\n        console.log(error);\n        return dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const logout = ()=>async(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        localStorage.removeItem('oliverpetshop_usuario');\n        return dispatch({\n            type:LOGOUT\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const verificarSesion=()=>async(dispatch)=>{\n    try {\n        let dataUsuario = localStorage.getItem('oliverpetshop_usuario');\n        if(dataUsuario){\n            return dispatch({\n                type:VERIFICAR_SESION,\n                payload:true\n            })\n        }\n        return dispatch({\n            type:VERIFICAR_SESION,\n            payload:false\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const register=(data)=>(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        return fetch(`${API}register`,{\n            method:'POST',\n            body:JSON.stringify(data),\n            headers\n        }).then(res=>res.json()).then(response=>{\n            if(response.ok){\n                let objUsuario = {\n                    nombre:response.usuario.nombre,\n                    email:response.usuario.email,\n                    foto:response.usuario.foto\n                }\n                localStorage.setItem('oliverpetshop_usuario',JSON.stringify(objUsuario));\n                dispatch({\n                    type:LOGIN,\n                    payload:localStorage.getItem('oliverpetshop_usuario')\n                });\n            }else{\n                dispatch({\n                    type:ERROR,\n                    payload:response.info\n                })\n            }\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const singInWithGoogle = tokenId => async(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        return fetch(`${API}google/tokensignin`,{\n            method:'POST',\n            headers,\n            body:JSON.stringify({token:tokenId})\n        }).then(res=>res.json()).then(response=>{\n            if(!response.ok){\n                return dispatch({\n                    type:ERROR,\n                    payload:response.info\n                })\n            };\n            let objUsuario = {\n                nombre:response.usuario.nombre,\n                email:response.usuario.email,\n                foto:response.usuario.foto\n            }\n            localStorage.setItem('oliverpetshop_usuario',JSON.stringify(objUsuario));\n            dispatch({\n                type:LOGIN,\n                payload:localStorage.getItem('oliverpetshop_usuario')\n            });\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}