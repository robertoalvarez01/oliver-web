{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n//import {API} from '../config/index';\nimport { TRAER_PRODUCTOS, AGREGAR_PRODUCTO, ELIMINAR_PRODUCTO, LOADING, ERROR } from '../types/carritoTypes';\nexport var traerProductos = function traerProductos() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var productos;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n\n              try {\n                productos = JSON.parse(localStorage.getItem('carrito'));\n                dispatch({\n                  type: TRAER_PRODUCTOS,\n                  payload: productos\n                });\n              } catch (error) {\n                dispatch({\n                  type: ERROR,\n                  payload: error\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var agregarProducto = function agregarProducto(producto) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n      var productos, listProductosUpgrade;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n\n              try {\n                //productos que hay en el reducer\n                productos = getState().carritoReducer.productos;\n                productos.map(function (prd) {\n                  if (prd.idSubProducto == producto.idSubProducto) {\n                    prd.cantidad++;\n                  }\n                });\n                console.log(productos);\n                listProductosUpgrade = [].concat(_toConsumableArray(productos), [producto]); //actualizo localstorage\n\n                localStorage.setItem('carrito', JSON.stringify(listProductosUpgrade));\n                setTimeout(function () {\n                  dispatch({\n                    type: AGREGAR_PRODUCTO,\n                    payload: listProductosUpgrade\n                  });\n                }, 1500);\n              } catch (error) {\n                dispatch({\n                  type: ERROR,\n                  payload: error\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var eliminarProducto = function eliminarProducto(idSubProducto) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n      var productos, newProductos;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n\n              try {\n                productos = getState().carritoReducer.productos; //filtro los productos que no tengan el idProducto que se recibió. entonces elimino ese producto y actualizo el reducer.\n\n                newProductos = productos.filter(function (newArray) {\n                  return newArray.idSubProducto !== idSubProducto;\n                });\n                console.log(newProductos);\n                localStorage.setItem('carrito', JSON.stringify(newProductos));\n                dispatch({\n                  type: ELIMINAR_PRODUCTO,\n                  payload: newProductos\n                });\n              } catch (error) {\n                dispatch({\n                  type: ERROR,\n                  payload: error\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/franc/Documents/oliver-2/oliver-sitio/store/actions/carritoActions.js"],"names":["TRAER_PRODUCTOS","AGREGAR_PRODUCTO","ELIMINAR_PRODUCTO","LOADING","ERROR","traerProductos","dispatch","type","productos","JSON","parse","localStorage","getItem","payload","error","agregarProducto","producto","getState","carritoReducer","map","prd","idSubProducto","cantidad","console","log","listProductosUpgrade","setItem","stringify","setTimeout","eliminarProducto","newProductos","filter","newArray"],"mappings":"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","sourcesContent":["//import {API} from '../config/index';\r\nimport {TRAER_PRODUCTOS,AGREGAR_PRODUCTO,ELIMINAR_PRODUCTO,LOADING,ERROR} from '../types/carritoTypes';\r\n\r\nexport const traerProductos = ()=>async (dispatch)=>{\r\n    dispatch({\r\n        type:LOADING\r\n    });\r\n    try {\r\n        const productos = JSON.parse(localStorage.getItem('carrito'));\r\n        dispatch({\r\n            type:TRAER_PRODUCTOS,\r\n            payload:productos\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        })\r\n    }\r\n}\r\n\r\nexport const agregarProducto = producto=>async (dispatch,getState)=>{\r\n    dispatch({\r\n        type:LOADING\r\n    });\r\n    try {\r\n        //productos que hay en el reducer\r\n        let {productos} = getState().carritoReducer;\r\n        productos.map((prd)=>{\r\n            if(prd.idSubProducto == producto.idSubProducto){\r\n                prd.cantidad++;\r\n            }\r\n        });\r\n        console.log(productos);\r\n        let listProductosUpgrade = [\r\n            ...productos,\r\n            producto\r\n        ];\r\n        //actualizo localstorage\r\n        localStorage.setItem('carrito',JSON.stringify(listProductosUpgrade));\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type:AGREGAR_PRODUCTO,\r\n                payload:listProductosUpgrade\r\n            })\r\n        }, 1500);\r\n    } catch (error) {\r\n       dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        }) \r\n    }\r\n}\r\n\r\nexport const eliminarProducto = idSubProducto=>async (dispatch,getState)=>{\r\n    dispatch({\r\n        type:LOADING\r\n    });\r\n    try {\r\n        const {productos} = getState().carritoReducer;\r\n        //filtro los productos que no tengan el idProducto que se recibió. entonces elimino ese producto y actualizo el reducer.\r\n        const newProductos = productos.filter(newArray=>newArray.idSubProducto !== idSubProducto);\r\n        console.log(newProductos);\r\n        localStorage.setItem('carrito',JSON.stringify(newProductos));\r\n        dispatch({\r\n            type:ELIMINAR_PRODUCTO,\r\n            payload:newProductos\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        })    \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}