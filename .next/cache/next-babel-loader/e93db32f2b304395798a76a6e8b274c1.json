{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n//import {API} from '../config/index';\nimport { TRAER_PRODUCTOS, AGREGAR_PRODUCTO, ELIMINAR_PRODUCTO, LOADING, ERROR } from '../types/carritoTypes';\nexport var traerProductos = function traerProductos() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var productos;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n\n              try {\n                productos = JSON.parse(localStorage.getItem('carrito'));\n                dispatch({\n                  type: TRAER_PRODUCTOS,\n                  payload: productos\n                });\n              } catch (error) {\n                dispatch({\n                  type: ERROR,\n                  payload: error\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var agregarProducto = function agregarProducto(producto) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n      var productos, listProductosUpgrade, productoRepetido, restantes;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n\n              try {\n                //productos que hay en el reducer\n                productos = getState().carritoReducer.productos;\n                productoRepetido = productos.filter(function (res) {\n                  return res.idSubProducto == producto.idSubProducto;\n                });\n\n                if (productoRepetido.length > 0) {\n                  //si se intenta agregar de nuevo el mismo producto, se suma la cantidad, no todo el producto.\n                  productoRepetido[0].cantidad = productoRepetido[0].cantidad + producto.cantidad;\n                  restantes = productos.filter(function (newRes) {\n                    return newRes.idSubProducto != productoRepetido[0].idSubProducto;\n                  });\n\n                  if (restantes.length > 0) {\n                    listProductosUpgrade = [].concat(_toConsumableArray(restantes), [productoRepetido[0]]);\n                  } else {\n                    listProductosUpgrade = [productoRepetido[0]];\n                  }\n                } else {\n                  listProductosUpgrade = [].concat(_toConsumableArray(productos), [producto]);\n                } //actualizo localstorage\n\n\n                localStorage.setItem('carrito', JSON.stringify(listProductosUpgrade));\n                setTimeout(function () {\n                  dispatch({\n                    type: AGREGAR_PRODUCTO,\n                    payload: listProductosUpgrade\n                  });\n                }, 1500);\n              } catch (error) {\n                dispatch({\n                  type: ERROR,\n                  payload: error\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var eliminarProducto = function eliminarProducto(idSubProducto) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n      var productos, newProductos;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n\n              try {\n                productos = getState().carritoReducer.productos; //filtro los productos que no tengan el idProducto que se recibi√≥. entonces elimino ese producto y actualizo el reducer.\n\n                newProductos = productos.filter(function (newArray) {\n                  return newArray.idSubProducto !== idSubProducto;\n                });\n                console.log(newProductos);\n                localStorage.setItem('carrito', JSON.stringify(newProductos));\n                dispatch({\n                  type: ELIMINAR_PRODUCTO,\n                  payload: newProductos\n                });\n              } catch (error) {\n                dispatch({\n                  type: ERROR,\n                  payload: error\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":null,"metadata":{},"sourceType":"module"}