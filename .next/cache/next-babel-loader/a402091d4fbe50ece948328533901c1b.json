{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { API } from '../../config/index';\nimport { TRAER_ZONAS, SELECCIONAR, LOADING, ERROR, LIMPIAR_ACTIVO } from '../types/zonasTypes';\nexport var traerTodas = function traerTodas() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var dataUser, myHeaders, zonasApi, dataZonas;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n              _context.prev = 1;\n              dataUser = JSON.parse(localStorage.getItem('oliverpetshop_usuario'));\n              myHeaders = new Headers();\n              myHeaders.append(\"token\", dataUser.token);\n              _context.next = 7;\n              return fetch(\"\".concat(API, \"/zonas\"), {\n                headers: myHeaders\n              });\n\n            case 7:\n              zonasApi = _context.sent;\n              _context.next = 10;\n              return zonasApi.json();\n\n            case 10:\n              dataZonas = _context.sent;\n              dispatch({\n                type: TRAER_ZONAS,\n                payload: dataZonas.data\n              });\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch({\n                type: ERROR,\n                payload: _context.t0\n              });\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 14]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var seleccionar = function seleccionar(id) {\n  return function (dispatch, getState) {\n    if (!id) {\n      console.log('aca');\n      dispatch({\n        type: LIMPIAR_ACTIVO\n      });\n      return;\n    }\n\n    var zonas = getState().zonasReducer.zonas;\n    var zona = zonas.filter(function (z) {\n      return z.idZona == id;\n    });\n\n    if (!zona.length) {\n      dispatch({\n        type: ERROR,\n        payload: 'No se encontro la zona'\n      });\n      return;\n    }\n\n    zona = zona[0];\n    dispatch({\n      type: SELECCIONAR,\n      payload: zona\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"module"}