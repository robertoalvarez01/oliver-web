{"ast":null,"code":"import { API } from '../../config/index';\nimport { VERIFICAR_SESION, LOGIN, LOGOUT, LOADING, ERROR } from '../types/usuarioTypes';\nexport const login = data => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    if (data.email.trim() === '' || data.password.trim() === '') {\n      return dispatch({\n        type: ERROR,\n        payload: 'Es necesario completar todos los campos'\n      });\n    }\n\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    return fetch(`${API}/login`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers\n    }).then(res => res.json()).then(response => {\n      if (response.ok) {\n        let objUsuario = {\n          nombre: response.usuario.nombre,\n          email: response.usuario.email,\n          foto: response.usuario.foto,\n          token: response.token,\n          address: response.usuario.ubicacion\n        };\n        localStorage.setItem('oliverpetshop_usuario', JSON.stringify(objUsuario));\n        dispatch({\n          type: LOGIN,\n          payload: localStorage.getItem('oliverpetshop_usuario')\n        });\n      } else {\n        return dispatch({\n          type: ERROR,\n          payload: response.info\n        });\n      }\n    });\n  } catch (error) {\n    console.log(error);\n    return dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    localStorage.removeItem('oliverpetshop_usuario');\n    return dispatch({\n      type: LOGOUT\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const verificarSesion = () => async dispatch => {\n  console.log('eeeeeeee');\n\n  try {\n    let dataUsuario = JSON.parse(localStorage.getItem('oliverpetshop_usuario'));\n\n    if (dataUsuario) {\n      return dispatch({\n        type: VERIFICAR_SESION,\n        payload: {\n          data: dataUsuario,\n          logueado: true\n        }\n      });\n    }\n\n    return dispatch({\n      type: VERIFICAR_SESION,\n      payload: {\n        data: null,\n        logueado: false\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const register = data => dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    return fetch(`${API}register`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers\n    }).then(res => res.json()).then(response => {\n      if (response.ok) {\n        let objUsuario = {\n          nombre: response.usuario.nombre,\n          email: response.usuario.email,\n          foto: response.usuario.foto,\n          token: response.token,\n          address: response.usuario.address\n        };\n        localStorage.setItem('oliverpetshop_usuario', JSON.stringify(objUsuario));\n        dispatch({\n          type: LOGIN,\n          payload: localStorage.getItem('oliverpetshop_usuario')\n        });\n      } else {\n        dispatch({\n          type: ERROR,\n          payload: response.info\n        });\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const singInWithGoogle = tokenId => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    return fetch(`${API}google/tokensignin`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify({\n        token: tokenId\n      })\n    }).then(res => res.json()).then(response => {\n      if (!response.ok) {\n        return dispatch({\n          type: ERROR,\n          payload: response.info\n        });\n      }\n\n      ;\n      let objUsuario = {\n        nombre: response.usuario.nombre,\n        email: response.usuario.email,\n        foto: response.usuario.foto,\n        token: response.token,\n        address: response.usuario.address\n      };\n      localStorage.setItem('oliverpetshop_usuario', JSON.stringify(objUsuario));\n      dispatch({\n        type: LOGIN,\n        payload: localStorage.getItem('oliverpetshop_usuario')\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/franc/Documents/oliver-2/sitio-desa/store/actions/usuarioActions.js"],"names":["API","VERIFICAR_SESION","LOGIN","LOGOUT","LOADING","ERROR","login","data","dispatch","type","email","trim","password","payload","headers","Headers","append","fetch","method","body","JSON","stringify","then","res","json","response","ok","objUsuario","nombre","usuario","foto","token","address","ubicacion","localStorage","setItem","getItem","info","error","console","log","logout","removeItem","verificarSesion","dataUsuario","parse","logueado","register","singInWithGoogle","tokenId"],"mappings":"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","sourcesContent":["import {API} from '../../config/index';\r\nimport {VERIFICAR_SESION,LOGIN,LOGOUT,LOADING,ERROR} from '../types/usuarioTypes';\r\n\r\nexport const login = (data)=>async(dispatch)=>{\r\n    dispatch({\r\n        type:LOADING\r\n    });\r\n    try {\r\n        if(data.email.trim() === '' || data.password.trim() === ''){\r\n            return dispatch({\r\n                type:ERROR,\r\n                payload:'Es necesario completar todos los campos'\r\n            })\r\n        }\r\n        let headers = new Headers();\r\n        headers.append(\"Content-Type\", \"application/json\");\r\n        return fetch(`${API}/login`,{\r\n            method:'POST',\r\n            body:JSON.stringify(data),\r\n            headers\r\n        }).then(res=>res.json()).then(response=>{\r\n            if(response.ok){\r\n                let objUsuario = {\r\n                    nombre:response.usuario.nombre,\r\n                    email:response.usuario.email,\r\n                    foto:response.usuario.foto,\r\n                    token:response.token,\r\n                    address:response.usuario.ubicacion\r\n                }\r\n                localStorage.setItem('oliverpetshop_usuario',JSON.stringify(objUsuario));\r\n                dispatch({\r\n                    type:LOGIN,\r\n                    payload:localStorage.getItem('oliverpetshop_usuario')\r\n                })\r\n            }else{\r\n                return dispatch({\r\n                    type:ERROR,\r\n                    payload:response.info\r\n                })\r\n            }\r\n        })\r\n    } catch (error) {\r\n        console.log(error);\r\n        return dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = ()=>async(dispatch)=>{\r\n    dispatch({\r\n        type:LOADING\r\n    });\r\n    try {\r\n        localStorage.removeItem('oliverpetshop_usuario');\r\n        return dispatch({\r\n            type:LOGOUT\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        })\r\n    }\r\n}\r\n\r\nexport const verificarSesion=()=>async(dispatch)=>{\r\n    console.log('eeeeeeee');\r\n    try {\r\n        let dataUsuario = JSON.parse(localStorage.getItem('oliverpetshop_usuario'));\r\n        if(dataUsuario){\r\n            return dispatch({\r\n                type:VERIFICAR_SESION,\r\n                payload:{data:dataUsuario,logueado:true}\r\n            })\r\n        }\r\n        return dispatch({\r\n            type:VERIFICAR_SESION,\r\n            payload:{data:null,logueado:false}\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        })\r\n    }\r\n}\r\n\r\nexport const register=(data)=>(dispatch)=>{\r\n    dispatch({\r\n        type:LOADING\r\n    });\r\n    try {\r\n        let headers = new Headers();\r\n        headers.append(\"Content-Type\", \"application/json\");\r\n        return fetch(`${API}register`,{\r\n            method:'POST',\r\n            body:JSON.stringify(data),\r\n            headers\r\n        }).then(res=>res.json()).then(response=>{\r\n            if(response.ok){\r\n                let objUsuario = {\r\n                    nombre:response.usuario.nombre,\r\n                    email:response.usuario.email,\r\n                    foto:response.usuario.foto,\r\n                    token:response.token,\r\n                    address:response.usuario.address\r\n                }\r\n                localStorage.setItem('oliverpetshop_usuario',JSON.stringify(objUsuario));\r\n                dispatch({\r\n                    type:LOGIN,\r\n                    payload:localStorage.getItem('oliverpetshop_usuario')\r\n                });\r\n            }else{\r\n                dispatch({\r\n                    type:ERROR,\r\n                    payload:response.info\r\n                })\r\n            }\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        })\r\n    }\r\n}\r\n\r\nexport const singInWithGoogle = tokenId => async(dispatch)=>{\r\n    dispatch({\r\n        type:LOADING\r\n    });\r\n    try {\r\n        let headers = new Headers();\r\n        headers.append(\"Content-Type\", \"application/json\");\r\n        return fetch(`${API}google/tokensignin`,{\r\n            method:'POST',\r\n            headers,\r\n            body:JSON.stringify({token:tokenId})\r\n        }).then(res=>res.json()).then(response=>{\r\n            if(!response.ok){\r\n                return dispatch({\r\n                    type:ERROR,\r\n                    payload:response.info\r\n                })\r\n            };\r\n            let objUsuario = {\r\n                nombre:response.usuario.nombre,\r\n                email:response.usuario.email,\r\n                foto:response.usuario.foto,\r\n                token:response.token,\r\n                address:response.usuario.address\r\n            }\r\n            localStorage.setItem('oliverpetshop_usuario',JSON.stringify(objUsuario));\r\n            dispatch({\r\n                type:LOGIN,\r\n                payload:localStorage.getItem('oliverpetshop_usuario')\r\n            });\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}