{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n//import {API} from '../config/index';\nimport { TRAER_PRODUCTOS, AGREGAR_PRODUCTO, ELIMINAR_PRODUCTO, LOADING, ERROR, CAMBIAR_MEDIO_DE_PAGO, CAMBIAR_COSTO_ENVIO } from '../types/carritoTypes';\nexport var traerProductos = function traerProductos() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var productos, total, cantidad, payloadData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n              _context.prev = 1;\n              _context.next = 4;\n              return JSON.parse(localStorage.getItem('carrito'));\n\n            case 4:\n              productos = _context.sent;\n              total = 0;\n              productos.forEach(function (prd) {\n                total += parseFloat(prd.precio * prd.cantidad);\n              });\n              cantidad = productos.length;\n              payloadData = {\n                productos: productos,\n                total: total,\n                cantidad: cantidad\n              };\n              return _context.abrupt(\"return\", dispatch({\n                type: TRAER_PRODUCTOS,\n                payload: payloadData\n              }));\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", dispatch({\n                type: ERROR,\n                payload: _context.t0\n              }));\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 12]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var agregarProducto = function agregarProducto(producto) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n      var productos, listProductosUpgrade, productoRepetido, restantes, prds, total, cantidad, payloadData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n\n              try {\n                //productos que hay en el reducer\n                productos = getState().carritoReducer.productos;\n                productoRepetido = productos.filter(function (res) {\n                  return res.idSubProducto == producto.idSubProducto;\n                });\n\n                if (productoRepetido.length > 0) {\n                  //si se intenta agregar de nuevo el mismo producto, se suma la cantidad, no todo el producto.\n                  productoRepetido[0].cantidad = productoRepetido[0].cantidad + producto.cantidad;\n                  restantes = productos.filter(function (newRes) {\n                    return newRes.idSubProducto != productoRepetido[0].idSubProducto;\n                  });\n\n                  if (restantes.length > 0) {\n                    listProductosUpgrade = [].concat(_toConsumableArray(restantes), [productoRepetido[0]]);\n                  } else {\n                    listProductosUpgrade = [productoRepetido[0]];\n                  }\n                } else {\n                  listProductosUpgrade = [].concat(_toConsumableArray(productos), [producto]);\n                } //actualizo localstorage\n\n\n                localStorage.setItem('carrito', JSON.stringify(listProductosUpgrade)); //calculo el subtotal\n\n                prds = JSON.parse(localStorage.getItem('carrito'));\n                total = 0;\n                prds.forEach(function (prd) {\n                  total += parseFloat(prd.precio * prd.cantidad);\n                });\n                cantidad = listProductosUpgrade.length;\n                payloadData = {\n                  listProductosUpgrade: listProductosUpgrade,\n                  total: total,\n                  cantidad: cantidad\n                };\n                setTimeout(function () {\n                  dispatch({\n                    type: AGREGAR_PRODUCTO,\n                    payload: payloadData\n                  });\n                }, 1500);\n              } catch (error) {\n                dispatch({\n                  type: ERROR,\n                  payload: error\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var eliminarProducto = function eliminarProducto(idSubProducto) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n      var productos, newProductos, prds, total, payloadData;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch({\n                type: LOADING\n              });\n\n              try {\n                productos = getState().carritoReducer.productos; //filtro los productos que no tengan el idProducto que se recibi√≥. entonces elimino ese producto y actualizo el reducer.\n\n                newProductos = productos.filter(function (newArray) {\n                  return newArray.idSubProducto !== idSubProducto;\n                }); //console.log(newProductos);\n\n                localStorage.setItem('carrito', JSON.stringify(newProductos)); //calculo el subtotal\n\n                prds = JSON.parse(localStorage.getItem('carrito'));\n                total = 0;\n                prds.forEach(function (prd) {\n                  total += parseFloat(prd.precio * prd.cantidad);\n                });\n                payloadData = {\n                  newProductos: newProductos,\n                  total: total,\n                  cantidad: prds.length\n                };\n                dispatch({\n                  type: ELIMINAR_PRODUCTO,\n                  payload: payloadData\n                });\n              } catch (error) {\n                dispatch({\n                  type: ERROR,\n                  payload: error\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/home/franco/desarrollo/proyecto_oliver/oliver-web-next/store/actions/carritoActions.js"],"names":["TRAER_PRODUCTOS","AGREGAR_PRODUCTO","ELIMINAR_PRODUCTO","LOADING","ERROR","CAMBIAR_MEDIO_DE_PAGO","CAMBIAR_COSTO_ENVIO","traerProductos","dispatch","type","JSON","parse","localStorage","getItem","productos","total","forEach","prd","parseFloat","precio","cantidad","length","payloadData","payload","agregarProducto","producto","getState","carritoReducer","productoRepetido","filter","res","idSubProducto","restantes","newRes","listProductosUpgrade","setItem","stringify","prds","setTimeout","error","eliminarProducto","newProductos","newArray"],"mappings":"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","sourcesContent":["//import {API} from '../config/index';\nimport {TRAER_PRODUCTOS,AGREGAR_PRODUCTO,ELIMINAR_PRODUCTO,LOADING,ERROR, CAMBIAR_MEDIO_DE_PAGO, CAMBIAR_COSTO_ENVIO} from '../types/carritoTypes';\n\nexport const traerProductos = ()=>async (dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        const productos = await JSON.parse(localStorage.getItem('carrito'));\n        let total = 0;\n        productos.forEach(prd => {\n            total += parseFloat(prd.precio * prd.cantidad);\n        });\n\n        let cantidad = productos.length;\n\n        let payloadData = {\n            productos,\n            total,\n            cantidad\n        }\n        return dispatch({\n            type:TRAER_PRODUCTOS,\n            payload:payloadData\n        });\n    } catch (error) {\n        return dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const agregarProducto = producto=>async (dispatch,getState)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        //productos que hay en el reducer\n        let {productos} = getState().carritoReducer;\n        let listProductosUpgrade;\n        let productoRepetido = productos.filter(res=>res.idSubProducto==producto.idSubProducto);\n        if(productoRepetido.length>0){//si se intenta agregar de nuevo el mismo producto, se suma la cantidad, no todo el producto.\n            productoRepetido[0].cantidad = productoRepetido[0].cantidad + producto.cantidad;\n            let restantes = productos.filter(newRes=>newRes.idSubProducto!=productoRepetido[0].idSubProducto);\n            if(restantes.length>0){\n                listProductosUpgrade = [\n                    ...restantes,\n                    productoRepetido[0]\n                ];\n            }else{\n                listProductosUpgrade = [\n                    productoRepetido[0]\n                ];\n            }\n        }else{\n            listProductosUpgrade = [\n                ...productos,\n                producto\n            ];\n        }\n        //actualizo localstorage\n        localStorage.setItem('carrito',JSON.stringify(listProductosUpgrade));\n\n        //calculo el subtotal\n        const prds = JSON.parse(localStorage.getItem('carrito'));\n        let total = 0;\n        prds.forEach(prd => {\n            total += parseFloat(prd.precio * prd.cantidad);\n        });\n        let cantidad = listProductosUpgrade.length;\n\n        let payloadData = {\n            listProductosUpgrade,\n            total,\n            cantidad\n        }\n        setTimeout(() => {\n            dispatch({\n                type:AGREGAR_PRODUCTO,\n                payload:payloadData\n            })\n        }, 1500);\n    } catch (error) {\n       dispatch({\n            type:ERROR,\n            payload:error\n        }) \n    }\n}\n\nexport const eliminarProducto = idSubProducto=>async (dispatch,getState)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        const {productos} = getState().carritoReducer;\n        //filtro los productos que no tengan el idProducto que se recibi√≥. entonces elimino ese producto y actualizo el reducer.\n        const newProductos = productos.filter(newArray=>newArray.idSubProducto !== idSubProducto);\n\n        //console.log(newProductos);\n        localStorage.setItem('carrito',JSON.stringify(newProductos));\n\n        //calculo el subtotal\n        const prds = JSON.parse(localStorage.getItem('carrito'));\n        let total = 0;\n        prds.forEach(prd => {\n            total += parseFloat(prd.precio * prd.cantidad);\n        });\n        \n        let payloadData = {\n            newProductos,\n            total,\n            cantidad:prds.length\n        }\n        dispatch({\n            type:ELIMINAR_PRODUCTO,\n            payload:payloadData\n        });\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })    \n    }\n}"]},"metadata":{},"sourceType":"module"}