{"ast":null,"code":"//import {API} from '../config/index';\nimport { TRAER_PRODUCTOS, AGREGAR_PRODUCTO, ELIMINAR_PRODUCTO, LOADING, ERROR } from '../types/carritoTypes';\nexport const traerProductos = () => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    const productos = JSON.parse(localStorage.getItem('carrito'));\n    dispatch({\n      type: TRAER_PRODUCTOS,\n      payload: productos\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const agregarProducto = producto => async (dispatch, getState) => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    //productos que hay en el reducer\n    let {\n      productos\n    } = getState().carritoReducer;\n    let listProductosUpgrade = [...productos, producto]; //actualizo localstorage\n\n    localStorage.setItem('carrito', JSON.stringify(listProductosUpgrade));\n    setTimeout(() => {\n      dispatch({\n        type: AGREGAR_PRODUCTO,\n        payload: listProductosUpgrade\n      });\n    }, 1500);\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const eliminarProducto = idSubproducto => async (dispatch, getState) => {\n  console.log(idSubproducto);\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    const {\n      productos\n    } = getState().carritoReducer; //filtro los productos que no tengan el idProducto que se recibió. entonces elimino ese producto y actualizo el reducer.\n\n    const newProductos = productos.filter(newArray => newArray.idSubproducto !== idSubproducto);\n    localStorage.setItem('carrito', JSON.stringify(newProductos));\n    dispatch({\n      type: ELIMINAR_PRODUCTO,\n      payload: newProductos\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/franc/Documents/oliver-2/oliver-sitio/store/actions/carritoActions.js"],"names":["TRAER_PRODUCTOS","AGREGAR_PRODUCTO","ELIMINAR_PRODUCTO","LOADING","ERROR","traerProductos","dispatch","type","productos","JSON","parse","localStorage","getItem","payload","error","agregarProducto","producto","getState","carritoReducer","listProductosUpgrade","setItem","stringify","setTimeout","eliminarProducto","idSubproducto","console","log","newProductos","filter","newArray"],"mappings":"AAAA;AACA,SAAQA,eAAR,EAAwBC,gBAAxB,EAAyCC,iBAAzC,EAA2DC,OAA3D,EAAmEC,KAAnE,QAA+E,uBAA/E;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAI,MAAOC,QAAP,IAAkB;AAChDA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAACJ;AADA,GAAD,CAAR;;AAGA,MAAI;AACA,UAAMK,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAlB;AACAN,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACP,eADA;AAELa,MAAAA,OAAO,EAACL;AAFH,KAAD,CAAR;AAIH,GAND,CAME,OAAOM,KAAP,EAAc;AACZR,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACH,KADA;AAELS,MAAAA,OAAO,EAACC;AAFH,KAAD,CAAR;AAIH;AACJ,CAhBM;AAkBP,OAAO,MAAMC,eAAe,GAAGC,QAAQ,IAAE,OAAOV,QAAP,EAAgBW,QAAhB,KAA2B;AAChEX,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAACJ;AADA,GAAD,CAAR;;AAGA,MAAI;AACA;AACA,QAAI;AAACK,MAAAA;AAAD,QAAcS,QAAQ,GAAGC,cAA7B;AACA,QAAIC,oBAAoB,GAAG,CACvB,GAAGX,SADoB,EAEvBQ,QAFuB,CAA3B,CAHA,CAOA;;AACAL,IAAAA,YAAY,CAACS,OAAb,CAAqB,SAArB,EAA+BX,IAAI,CAACY,SAAL,CAAeF,oBAAf,CAA/B;AACAG,IAAAA,UAAU,CAAC,MAAM;AACbhB,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAACN,gBADA;AAELY,QAAAA,OAAO,EAACM;AAFH,OAAD,CAAR;AAIH,KALS,EAKP,IALO,CAAV;AAMH,GAfD,CAeE,OAAOL,KAAP,EAAc;AACbR,IAAAA,QAAQ,CAAC;AACJC,MAAAA,IAAI,EAACH,KADD;AAEJS,MAAAA,OAAO,EAACC;AAFJ,KAAD,CAAR;AAIF;AACJ,CAzBM;AA2BP,OAAO,MAAMS,gBAAgB,GAAGC,aAAa,IAAE,OAAOlB,QAAP,EAAgBW,QAAhB,KAA2B;AACtEQ,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;AACAlB,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAACJ;AADA,GAAD,CAAR;;AAGA,MAAI;AACA,UAAM;AAACK,MAAAA;AAAD,QAAcS,QAAQ,GAAGC,cAA/B,CADA,CAEA;;AACA,UAAMS,YAAY,GAAGnB,SAAS,CAACoB,MAAV,CAAiBC,QAAQ,IAAEA,QAAQ,CAACL,aAAT,KAA2BA,aAAtD,CAArB;AACAb,IAAAA,YAAY,CAACS,OAAb,CAAqB,SAArB,EAA+BX,IAAI,CAACY,SAAL,CAAeM,YAAf,CAA/B;AACArB,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACL,iBADA;AAELW,MAAAA,OAAO,EAACc;AAFH,KAAD,CAAR;AAIH,GATD,CASE,OAAOb,KAAP,EAAc;AACZR,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACH,KADA;AAELS,MAAAA,OAAO,EAACC;AAFH,KAAD,CAAR;AAIH;AACJ,CApBM","sourcesContent":["//import {API} from '../config/index';\r\nimport {TRAER_PRODUCTOS,AGREGAR_PRODUCTO,ELIMINAR_PRODUCTO,LOADING,ERROR} from '../types/carritoTypes';\r\n\r\nexport const traerProductos = ()=>async (dispatch)=>{\r\n    dispatch({\r\n        type:LOADING\r\n    });\r\n    try {\r\n        const productos = JSON.parse(localStorage.getItem('carrito'));\r\n        dispatch({\r\n            type:TRAER_PRODUCTOS,\r\n            payload:productos\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        })\r\n    }\r\n}\r\n\r\nexport const agregarProducto = producto=>async (dispatch,getState)=>{\r\n    dispatch({\r\n        type:LOADING\r\n    });\r\n    try {\r\n        //productos que hay en el reducer\r\n        let {productos} = getState().carritoReducer;\r\n        let listProductosUpgrade = [\r\n            ...productos,\r\n            producto\r\n        ];\r\n        //actualizo localstorage\r\n        localStorage.setItem('carrito',JSON.stringify(listProductosUpgrade));\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type:AGREGAR_PRODUCTO,\r\n                payload:listProductosUpgrade\r\n            })\r\n        }, 1500);\r\n    } catch (error) {\r\n       dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        }) \r\n    }\r\n}\r\n\r\nexport const eliminarProducto = idSubproducto=>async (dispatch,getState)=>{\r\n    console.log(idSubproducto);\r\n    dispatch({\r\n        type:LOADING\r\n    });\r\n    try {\r\n        const {productos} = getState().carritoReducer;\r\n        //filtro los productos que no tengan el idProducto que se recibió. entonces elimino ese producto y actualizo el reducer.\r\n        const newProductos = productos.filter(newArray=>newArray.idSubproducto !== idSubproducto);\r\n        localStorage.setItem('carrito',JSON.stringify(newProductos));\r\n        dispatch({\r\n            type:ELIMINAR_PRODUCTO,\r\n            payload:newProductos\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type:ERROR,\r\n            payload:error\r\n        })    \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}