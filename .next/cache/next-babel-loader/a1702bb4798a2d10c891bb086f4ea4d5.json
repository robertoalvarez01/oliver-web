{"ast":null,"code":"//import {API} from '../config/index';\nimport { TRAER_PRODUCTOS, AGREGAR_PRODUCTO, ELIMINAR_PRODUCTO, LOADING, ERROR } from '../types/carritoTypes';\nexport const traerProductos = () => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    const productos = JSON.parse(localStorage.getItem('carrito'));\n    let subtotal = 0;\n    productos.forEach(prd => {\n      subtotal += parseInt(prd.precioUnidad * prd.cantidad);\n    });\n    let payloadData = {\n      productos,\n      subtotal\n    };\n    dispatch({\n      type: TRAER_PRODUCTOS,\n      payload: payloadData\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const agregarProducto = producto => async (dispatch, getState) => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    //productos que hay en el reducer\n    let {\n      productos\n    } = getState().carritoReducer;\n    let listProductosUpgrade;\n    let productoRepetido = productos.filter(res => res.idSubProducto == producto.idSubProducto);\n\n    if (productoRepetido.length > 0) {\n      //si se intenta agregar de nuevo el mismo producto, se suma la cantidad, no todo el producto.\n      productoRepetido[0].cantidad = productoRepetido[0].cantidad + producto.cantidad;\n      let restantes = productos.filter(newRes => newRes.idSubProducto != productoRepetido[0].idSubProducto);\n\n      if (restantes.length > 0) {\n        listProductosUpgrade = [...restantes, productoRepetido[0]];\n      } else {\n        listProductosUpgrade = [productoRepetido[0]];\n      }\n    } else {\n      listProductosUpgrade = [...productos, producto];\n    } //actualizo localstorage\n\n\n    localStorage.setItem('carrito', JSON.stringify(listProductosUpgrade)); //calculo el subtotal\n\n    const prds = JSON.parse(localStorage.getItem('carrito'));\n    let subtotal = 0;\n    prds.forEach(prd => {\n      subtotal += parseInt(prd.precioUnidad * prd.cantidad);\n    });\n    let payloadData = {\n      listProductosUpgrade,\n      subtotal\n    };\n    setTimeout(() => {\n      dispatch({\n        type: AGREGAR_PRODUCTO,\n        payload: payloadData\n      });\n    }, 1500);\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const eliminarProducto = idSubProducto => async (dispatch, getState) => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    const {\n      productos\n    } = getState().carritoReducer; //filtro los productos que no tengan el idProducto que se recibiÃ³. entonces elimino ese producto y actualizo el reducer.\n\n    const newProductos = productos.filter(newArray => newArray.idSubProducto !== idSubProducto); //console.log(newProductos);\n\n    localStorage.setItem('carrito', JSON.stringify(newProductos)); //calculo el subtotal\n\n    const prds = JSON.parse(localStorage.getItem('carrito'));\n    let subtotal = 0;\n    prds.forEach(prd => {\n      subtotal += parseInt(prd.precioUnidad * prd.cantidad);\n    });\n    let payloadData = {\n      newProductos,\n      subtotal\n    };\n    dispatch({\n      type: ELIMINAR_PRODUCTO,\n      payload: payloadData\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}