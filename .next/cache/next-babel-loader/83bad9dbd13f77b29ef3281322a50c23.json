{"ast":null,"code":"import { API } from '../../config/index';\nimport { VERIFICAR_SESION, LOGIN, LOGOUT, LOADING, ERROR, UPDATE_USER } from '../types/usuarioTypes';\nexport const login = data => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    if (data.email.trim() === '' || data.password.trim() === '') {\n      return dispatch({\n        type: ERROR,\n        payload: 'Es necesario completar todos los campos'\n      });\n    }\n\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    return fetch(`${API}/login`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers\n    }).then(res => res.json()).then(response => {\n      if (response.ok) {\n        let objUsuario = {\n          nombre: response.usuario.nombre,\n          email: response.usuario.email,\n          foto: response.usuario.foto,\n          token: response.token,\n          address: response.usuario.ubicacion,\n          idUsuario: response.usuario.idUsuario,\n          lat: response.usuario.lat,\n          lon: response.usuario.lon\n        };\n        localStorage.setItem('oliverpetshop_usuario', JSON.stringify(objUsuario));\n        dispatch({\n          type: LOGIN,\n          payload: localStorage.getItem('oliverpetshop_usuario')\n        });\n      } else {\n        return dispatch({\n          type: ERROR,\n          payload: response.info\n        });\n      }\n    });\n  } catch (error) {\n    console.log(error);\n    return dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    localStorage.removeItem('oliverpetshop_usuario');\n    return dispatch({\n      type: LOGOUT\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const verificarSesion = () => async dispatch => {\n  try {\n    let dataUsuario = JSON.parse(localStorage.getItem('oliverpetshop_usuario'));\n\n    if (dataUsuario) {\n      return dispatch({\n        type: VERIFICAR_SESION,\n        payload: {\n          data: dataUsuario,\n          logueado: true\n        }\n      });\n    }\n\n    return dispatch({\n      type: VERIFICAR_SESION,\n      payload: {\n        data: null,\n        logueado: false\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const register = data => dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    return fetch(`${API}register`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers\n    }).then(res => res.json()).then(response => {\n      if (response.ok) {\n        let objUsuario = {\n          nombre: response.usuario.nombre,\n          email: response.usuario.email,\n          foto: response.usuario.foto,\n          token: response.token,\n          address: response.usuario.address,\n          idUsuario: response.usuario.idUsuario\n        };\n        localStorage.setItem('oliverpetshop_usuario', JSON.stringify(objUsuario));\n        dispatch({\n          type: LOGIN,\n          payload: localStorage.getItem('oliverpetshop_usuario')\n        });\n      } else {\n        dispatch({\n          type: ERROR,\n          payload: response.info\n        });\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const singInWithGoogle = tokenId => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    return fetch(`${API}google/tokensignin`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify({\n        token: tokenId\n      })\n    }).then(res => res.json()).then(response => {\n      if (!response.ok) {\n        return dispatch({\n          type: ERROR,\n          payload: response.info\n        });\n      }\n\n      ;\n      let objUsuario = {\n        nombre: response.usuario.nombre,\n        email: response.usuario.email,\n        foto: response.usuario.foto,\n        token: response.token,\n        address: response.usuario.address,\n        idUsuario: response.usuario.idUsuario,\n        lat: response.usuario.lat,\n        lon: response.usuario.lon\n      };\n      localStorage.setItem('oliverpetshop_usuario', JSON.stringify(objUsuario));\n      dispatch({\n        type: LOGIN,\n        payload: localStorage.getItem('oliverpetshop_usuario')\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const actualizarFoto = (data, id) => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    let token = JSON.parse(localStorage.getItem('oliverpetshop_usuario')).token;\n    headers.append(\"token\", token);\n    const request = await fetch(`${API}actualizarFotoUsuarioDesdeWeb/${id}`, {\n      method: 'PUT',\n      headers,\n      body: data\n    });\n    const dataRequest = await request.json();\n\n    if (dataRequest.ok) {\n      localStorage.setItem('oliverpetshop_usuario', JSON.stringify(dataRequest.user));\n      dispatch({\n        type: UPDATE_USER,\n        payload: dataRequest.user\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const actualizarUsuario = (data, id) => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    let headers = new Headers();\n    let token = JSON.parse(localStorage.getItem('oliverpetshop_usuario')).token;\n    headers.append(\"token\", token);\n    headers.append(\"Content-Type\", \"application/json\");\n    const request = await fetch(`${API}actualizarUsuarioDesdeWeb/${id}`, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(data)\n    });\n    const dataRequest = await request.json();\n\n    if (dataRequest.ok) {\n      localStorage.setItem('oliverpetshop_usuario', JSON.stringify(dataRequest.user));\n      dispatch({\n        type: UPDATE_USER,\n        payload: dataRequest.user\n      });\n    }\n\n    console.log(data);\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/home/franco/desarrollo/proyecto_oliver/oliver-web-next/store/actions/usuarioActions.js"],"names":["API","VERIFICAR_SESION","LOGIN","LOGOUT","LOADING","ERROR","UPDATE_USER","login","data","dispatch","type","email","trim","password","payload","headers","Headers","append","fetch","method","body","JSON","stringify","then","res","json","response","ok","objUsuario","nombre","usuario","foto","token","address","ubicacion","idUsuario","lat","lon","localStorage","setItem","getItem","info","error","console","log","logout","removeItem","verificarSesion","dataUsuario","parse","logueado","register","singInWithGoogle","tokenId","actualizarFoto","id","request","dataRequest","user","actualizarUsuario"],"mappings":"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","sourcesContent":["import {API} from '../../config/index';\nimport {VERIFICAR_SESION,LOGIN,LOGOUT,LOADING,ERROR,UPDATE_USER} from '../types/usuarioTypes';\n\nexport const login = (data)=>async(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        if(data.email.trim() === '' || data.password.trim() === ''){\n            return dispatch({\n                type:ERROR,\n                payload:'Es necesario completar todos los campos'\n            })\n        }\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        return fetch(`${API}/login`,{\n            method:'POST',\n            body:JSON.stringify(data),\n            headers\n        }).then(res=>res.json()).then(response=>{\n            if(response.ok){\n                let objUsuario = {\n                    nombre:response.usuario.nombre,\n                    email:response.usuario.email,\n                    foto:response.usuario.foto,\n                    token:response.token,\n                    address:response.usuario.ubicacion,\n                    idUsuario:response.usuario.idUsuario,\n                    lat:response.usuario.lat,\n                    lon:response.usuario.lon\n                }\n                localStorage.setItem('oliverpetshop_usuario',JSON.stringify(objUsuario));\n                dispatch({\n                    type:LOGIN,\n                    payload:localStorage.getItem('oliverpetshop_usuario')\n                })\n            }else{\n                return dispatch({\n                    type:ERROR,\n                    payload:response.info\n                })\n            }\n        })\n    } catch (error) {\n        console.log(error);\n        return dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const logout = ()=>async(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        localStorage.removeItem('oliverpetshop_usuario');\n        return dispatch({\n            type:LOGOUT\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const verificarSesion=()=>async(dispatch)=>{\n    try {\n        let dataUsuario = JSON.parse(localStorage.getItem('oliverpetshop_usuario'));\n        if(dataUsuario){\n            return dispatch({\n                type:VERIFICAR_SESION,\n                payload:{data:dataUsuario,logueado:true}\n            })\n        }\n        return dispatch({\n            type:VERIFICAR_SESION,\n            payload:{data:null,logueado:false}\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const register=(data)=>(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        return fetch(`${API}register`,{\n            method:'POST',\n            body:JSON.stringify(data),\n            headers\n        }).then(res=>res.json()).then(response=>{\n            if(response.ok){\n                let objUsuario = {\n                    nombre:response.usuario.nombre,\n                    email:response.usuario.email,\n                    foto:response.usuario.foto,\n                    token:response.token,\n                    address:response.usuario.address,\n                    idUsuario:response.usuario.idUsuario\n                }\n                localStorage.setItem('oliverpetshop_usuario',JSON.stringify(objUsuario));\n                dispatch({\n                    type:LOGIN,\n                    payload:localStorage.getItem('oliverpetshop_usuario')\n                });\n            }else{\n                dispatch({\n                    type:ERROR,\n                    payload:response.info\n                })\n            }\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const singInWithGoogle = tokenId => async(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        return fetch(`${API}google/tokensignin`,{\n            method:'POST',\n            headers,\n            body:JSON.stringify({token:tokenId})\n        }).then(res=>res.json()).then(response=>{\n            if(!response.ok){\n                return dispatch({\n                    type:ERROR,\n                    payload:response.info\n                })\n            };\n            let objUsuario = {\n                nombre:response.usuario.nombre,\n                email:response.usuario.email,\n                foto:response.usuario.foto,\n                token:response.token,\n                address:response.usuario.address,\n                idUsuario:response.usuario.idUsuario,\n                lat:response.usuario.lat,\n                lon:response.usuario.lon\n            }\n            localStorage.setItem('oliverpetshop_usuario',JSON.stringify(objUsuario));\n            dispatch({\n                type:LOGIN,\n                payload:localStorage.getItem('oliverpetshop_usuario')\n            });\n        })\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const actualizarFoto = (data,id) =>async(dispatch)=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        let headers = new Headers();\n        let token = JSON.parse(localStorage.getItem('oliverpetshop_usuario')).token;\n        headers.append(\"token\", token);\n        const request = await fetch(`${API}actualizarFotoUsuarioDesdeWeb/${id}`,{\n            method:'PUT',\n            headers,\n            body:data\n        });\n        const dataRequest = await request.json();\n        if(dataRequest.ok){\n            localStorage.setItem('oliverpetshop_usuario',JSON.stringify(dataRequest.user));\n            dispatch({\n                type:UPDATE_USER,\n                payload:dataRequest.user\n            })\n        }\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}\n\nexport const actualizarUsuario = (data,id)=>async dispatch=>{\n    dispatch({\n        type:LOADING\n    });\n    try {\n        let headers = new Headers();\n        let token = JSON.parse(localStorage.getItem('oliverpetshop_usuario')).token;\n        headers.append(\"token\", token);\n        headers.append(\"Content-Type\", \"application/json\");\n        const request = await fetch(`${API}actualizarUsuarioDesdeWeb/${id}`,{\n            method:'PUT',\n            headers,\n            body:JSON.stringify(data)\n        });\n        const dataRequest = await request.json();\n        if(dataRequest.ok){\n            localStorage.setItem('oliverpetshop_usuario',JSON.stringify(dataRequest.user));\n            dispatch({\n                type:UPDATE_USER,\n                payload:dataRequest.user\n            })\n        }\n        console.log(data);\n    } catch (error) {\n        dispatch({\n            type:ERROR,\n            payload:error\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}