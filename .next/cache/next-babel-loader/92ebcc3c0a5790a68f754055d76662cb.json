{"ast":null,"code":"//import {API} from '../config/index';\nimport { TRAER_PRODUCTOS, AGREGAR_PRODUCTO, ELIMINAR_PRODUCTO, LOADING, ERROR } from '../types/carritoTypes';\nexport const traerProductos = () => async dispatch => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    const productos = JSON.parse(localStorage.getItem('carrito'));\n    dispatch({\n      type: TRAER_PRODUCTOS,\n      payload: productos\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const agregarProducto = producto => async (dispatch, getState) => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    //productos que hay en el reducer\n    let {\n      productos\n    } = getState().carritoReducer;\n    let listProductosUpgrade = [...productos, producto]; //actualizo localstorage\n\n    localStorage.setItem('carrito', JSON.stringify(listProductosUpgrade));\n    setTimeout(() => {\n      dispatch({\n        type: AGREGAR_PRODUCTO,\n        payload: listProductosUpgrade\n      });\n    }, 1500);\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};\nexport const eliminarProducto = idProducto => async (dispatch, getState) => {\n  dispatch({\n    type: LOADING\n  });\n\n  try {\n    const {\n      productos\n    } = getState().carritoReducer; //filtro los productos que no tengan el idProducto que se recibiÃ³. entonces elimino ese producto y actualizo el reducer.\n\n    const newProductos = productos.filter(newArray => newArray.idProducto !== idProducto);\n    localStorage.setItem('carrito', JSON.stringify(newProductos));\n    dispatch({\n      type: ELIMINAR_PRODUCTO,\n      payload: newProductos\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR,\n      payload: error\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}